{"version":3,"file":"taoensso.truss.impl.js","sources":["taoensso/truss/impl.cljs"],"mappings":"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","names":["taoensso.truss.impl/rsome","pred","coll","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","acc","in","temp__5457__auto__","p","cljs.core/reduced","taoensso.truss.impl/revery?","taoensso.truss.impl/some?","x","taoensso.truss.impl/set*","cljs.core/set","taoensso.truss.impl/ks=","ks","m","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","taoensso.truss.impl/ks<=","clojure.set/subset?","taoensso.truss.impl/ks>=","clojure.set/superset?","taoensso.truss.impl/ks-nnil?","p1__35477#","cljs.core.get.cljs$core$IFn$_invoke$arity$2","taoensso.truss.impl/default-error-fn","data_","cljs.core/deref","data","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","taoensso.truss.impl/*?data*","taoensso.truss.impl/*error-fn*","taoensso.truss.impl/non-throwing","e35479","js/Error","_","taoensso.truss.impl/non-throwing?","taoensso.truss.impl/-xpred","cljs.core/vector?","vec__35480","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","type","a1","a2","a3","G__35483","cljs.core/Keyword","cljs.core.sequence.cljs$core$IFn$_invoke$arity$1","cljs.core/seq","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/-conj","x__6080__auto__","cljs.core/vec","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","vec__35521","vec__35525","vec__35528","vec__35531","self","?pred","nt-a1?","nt-a2?","nt-a3?","nt-a1","nt-a2","nt-a3","nt-comp?","and__5114__auto__","G__35539","taoensso.truss.impl/fmt-err-msg","x1","x2","x3","x4","this__5797__auto__","writer__5798__auto__","opt__5799__auto__","cljs.core/-write","taoensso.truss.impl/WrappedError","taoensso.truss.impl/->WrappedError","val","taoensso.truss.impl/-assertion-error","msg","taoensso.truss.impl/-dummy-error","taoensso.truss.impl/-invar-violation!","elidable?","ns-str","?line","form","?err","?data-fn","error-fn","G__35610","cljs.core/Delay","instant","js/Date","line-str","or__5126__auto__","form-str","undefn-val?","val-str","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","msg_","?err-str","e","cljs.core/not","?data","data-fn","e35611","cljs.core/type","cljs.core/*assert*","cljs.core/List"],"sourcesContent":["(ns taoensso.truss.impl\n  \"Private implementation details.\"\n  (:require [clojure.set :as set])\n  (:refer-clojure :exclude [some?])\n        \n  (:require-macros\n   [taoensso.truss.impl :as impl-macros\n    :refer [compile-if catching -invar]]))\n\n(comment (require '[taoensso.encore :as enc :refer [qb]]))\n\n;;;; TODO\n;; - Namespaced kw registry like clojure.spec, (truss/def <kw> <pred>)?\n;; - Ideas for easier sharing of composed preds?\n\n;;;; Manual Encore imports\n;; A bit of a nuisance but:\n;;   - Allows Encore to depend on Truss (esp. nb for back-compatibility wrappers).\n;;   - Allows Truss to be entirely dependency free.\n\n                                                        \n                                     \n                                                                           \n\n                                                      \n                                                                             \n                                                                                  \n                                                                 \n                                  \n            \n                                                              \n                                                                \n                                               \n            \n                                                                                      \n                                                                                         \n\n(defn rsome   [pred coll] (reduce (fn [acc in] (when-let [p (pred in)] (reduced p))) nil coll))\n(defn revery? [pred coll] (reduce (fn [acc in] (if (pred in) true (reduced nil))) true coll))\n\n       (defn ^boolean some? [x] (if (nil? x) false true))\n     \n           \n                                                         \n                                         \n\n(compile-if (completing (fn [])) ; Clojure 1.7+\n  (def  set* set)\n  (defn set* [x] (if (set? x) x (set x))))\n\n(do\n  (defn                       ^boolean ks=      [ks m] (=             (set (keys m)) (set* ks)))\n  (defn                       ^boolean ks<=     [ks m] (set/subset?   (set (keys m)) (set* ks)))\n  (defn                       ^boolean ks>=     [ks m] (set/superset? (set (keys m)) (set* ks)))\n  (defn                       ^boolean ks-nnil? [ks m] (revery?     #(some? (get m %))     ks)))\n\n;;;; Truss\n\n(defn default-error-fn [data_]\n  (let [data @data_]\n    (throw (ex-info @(:msg_ data) (dissoc data :msg_)))))\n\n(def ^:dynamic *?data* nil)\n(def ^:dynamic *error-fn* default-error-fn)\n\n(defn  non-throwing [pred] (fn [x] (catching (pred x))))\n(defn- non-throwing?\n  \"Returns true for some common preds that are naturally non-throwing.\"\n  [p]\n         false ; Would need `resolve`; other ideas?\n       \n     \n                \n                \n                \n            \n                                                                      \n                                                                          \n                                                                        \n                                                           )\n\n(defn -xpred\n  \"Expands any special predicate forms and returns [<expanded-pred> <non-throwing?>].\"\n  [pred]\n  (if-not (vector? pred)\n    [pred (non-throwing? pred)]\n    (let [[type a1 a2 a3] pred]\n      (assert a1 \"Special predicate [<special-type> <arg>] form w/o <arg>\")\n      (case type\n        :set=             [`(fn [~'x] (=             (set* ~'x) (set* ~a1))) false]\n        :set<=            [`(fn [~'x] (set/subset?   (set* ~'x) (set* ~a1))) false]\n        :set>=            [`(fn [~'x] (set/superset? (set* ~'x) (set* ~a1))) false]\n        :ks=              [`(fn [~'x] (ks=      ~a1 ~'x)) false]\n        :ks<=             [`(fn [~'x] (ks<=     ~a1 ~'x)) false]\n        :ks>=             [`(fn [~'x] (ks>=     ~a1 ~'x)) false]\n        :ks-nnil?         [`(fn [~'x] (ks-nnil? ~a1 ~'x)) false]\n        (    :el     :in) [`(fn [~'x]      (contains? (set* ~a1) ~'x))  false]\n        (:not-el :not-in) [`(fn [~'x] (not (contains? (set* ~a1) ~'x))) false]\n\n        ;; Pred composition\n        (let [self (fn [?pred] (when ?pred (-xpred ?pred)))\n\n              ;; Support recursive expansion:\n              [[a1 nt-a1?] [a2 nt-a2?] [a3 nt-a3?]] [(self a1) (self a2) (self a3)]\n\n              nt-a1    (when a1 (if nt-a1? a1 `(non-throwing ~a1)))\n              nt-a2    (when a2 (if nt-a2? a2 `(non-throwing ~a2)))\n              nt-a3    (when a3 (if nt-a3? a3 `(non-throwing ~a3)))\n              nt-comp? (cond a3 (and nt-a1? nt-a2? nt-a3?)\n                             a2 (and nt-a1? nt-a2?)\n                             a1 nt-a1?)]\n\n          (case type\n            :and ; all-of\n            (cond\n              a3 [`(fn [~'x] (and (~a1 ~'x) (~a2 ~'x) (~a3 ~'x))) nt-comp?]\n              a2 [`(fn [~'x] (and (~a1 ~'x) (~a2 ~'x))) nt-comp?]\n              a1 [a1 nt-a1?])\n\n            :or  ; any-of\n            (cond\n              a3 [`(fn [~'x] (or (~nt-a1 ~'x) (~nt-a2 ~'x) (~nt-a3 ~'x))) true]\n              a2 [`(fn [~'x] (or (~nt-a1 ~'x) (~nt-a2 ~'x))) true]\n              a1 [a1 nt-a1?])\n\n            :not ; complement/none-of\n            ;; Note that it's a little ambiguous whether we'd want\n            ;; non-throwing behaviour here or not so choosing to interpret\n            ;; throws as undefined to minimize surprise\n            (cond\n              a3 [`(fn [~'x] (not (or (~a1 ~'x) (~a2 ~'x) (~a3 ~'x)))) nt-comp?]\n              a2 [`(fn [~'x] (not (or (~a1 ~'x) (~a2 ~'x)))) nt-comp?]\n              a1 [`(fn [~'x] (not     (~a1 ~'x))) nt-a1?])))))))\n\n(comment\n  (-xpred string?)\n  (-xpred [:or string? integer? :foo]) ; t\n  (-xpred [:or string? integer? seq])  ; f\n  (-xpred [:or string? integer? [:and number? integer?]]) ; t\n  (-xpred [:or string? integer? [:and number? pos?]])     ; f\n  )\n\n(defn- fmt-err-msg [x1 x2 x3 x4]\n  ;; Cider unfortunately doesn't seem to print newlines in errors\n  (str \"Invariant violation in `\" x1 \":\" x2 \"`. Test form `\" x3 \"` failed against input val `\" x4 \"`.\"))\n\n     \n                  \n                                                          \n     \n                                  \n                      \n                        \n\n(comment (enc/qb 1e5 (pr-str {:a :A}) (fast-pr-str {:a :A})))\n\n(deftype WrappedError [val])\n(defn -assertion-error [msg]                                    (js/Error. msg))\n(def  -dummy-error                        (js-obj))\n(defn -invar-violation!\n  ;; - http://dev.clojure.org/jira/browse/CLJ-865 would be handy for line numbers.\n  [elidable? ns-str ?line form val ?err ?data-fn]\n  (when-let [error-fn *error-fn*]\n    (error-fn ; Nb consumer must deref while bindings are still active\n     (delay\n      (let [instant                                    (js/Date.)\n            line-str    (or ?line \"?\")\n            form-str    (str form)\n            undefn-val? (instance? WrappedError val)\n            val-str\n            (cond\n              undefn-val? \"<truss/undefined-val>\"\n              (nil? val)  \"<truss/nil>\"\n              :else\n              #_(str    val)\n              #_(pr-str val)\n              ;; Consider setting *print-length* for lazy seqs?\n                                      \n                     (pr-str      val))\n\n            ?err\n            (cond\n              (identical? -dummy-error ?err) nil\n              (instance?  WrappedError ?err)\n              (.-val     ^WrappedError ?err)\n              :else                    ?err)\n\n            msg_\n            (delay\n             (let [;; Clj 1.7+ `pr-str` dumps a ton of error info that we don't want here\n                   ?err-str (when-let [e ?err] (str ?err) #_(pr-str ?err))\n                   msg (fmt-err-msg ns-str line-str form-str val-str)]\n               (cond\n                 (not ?err)       msg\n                 undefn-val? (str msg \" An error was thrown while evaluating input val: [\" ?err-str \"].\")\n                 :else       (str msg \" An error was thrown while evaluating test form: [\" ?err-str \"].\"))))\n\n            ?data\n            (when-let [data-fn ?data-fn]\n              (catching (data-fn) e\n                {:data-error e}))]\n\n        {:dt        instant\n         :msg_      msg_\n         :ns-str    ns-str\n         :?line     ?line\n         ;; :?form  (when-not (string? form) form)\n         :form-str  form-str\n         :val       (if undefn-val? 'truss/undefined-val       val)\n         :val-type  (if undefn-val? 'truss/undefined-val (type val))\n         :?data      ?data  ; Arbitrary user data, handy for debugging\n         :*?data*   *?data* ; ''\n         :?err      ?err\n         :*assert*  *assert*\n         :elidable? elidable?})))))\n\n                \n                                                                                \n                                          \n                                                                            \n                                                                     \n                                                 \n\n                                     \n                                          \n                        \n                               \n                                                                                   \n\n                                                                        \n                         \n                                 \n                                                                                       \n\n                            \n                                                        \n                                                   \n                        \n                                                         \n\n                         \n                                  \n                                                                                       \n\n                                                        \n                            \n                                                    \n                         \n                                                                   \n\n                         \n                                  \n                                                                                           \n\n(comment\n  (macroexpand '(-invar true false 1      string?    \"foo\"             nil)) ; Type 0\n  (macroexpand '(-invar true false 1 [:or string?]   \"foo\"             nil)) ; Type 0\n  (macroexpand '(-invar true false 1    #(string? %) \"foo\"             nil)) ; Type 1\n  (macroexpand '(-invar true false 1      string?    (str \"foo\" \"bar\") nil)) ; Type 2\n  (macroexpand '(-invar true false 1    #(string? %) (str \"foo\" \"bar\") nil)) ; Type 3\n  (qb 1000000\n    (string? \"foo\")                                          ; Baseline\n    (-invar true false 1   string?    \"foo\"             nil) ; Type 0\n    (-invar true false 1 #(string? %) \"foo\"             nil) ; Type 1\n    (-invar true false 1   string?    (str \"foo\" \"bar\") nil) ; Type 2\n    (-invar true false 1 #(string? %) (str \"foo\" \"bar\") nil) ; Type 3\n    (try\n      (string? (try \"foo\" (catch Throwable _ nil)))\n      (catch Throwable _ nil)))\n  ;; [41.86 50.43 59.56 171.12 151.2 42.0]\n\n  (-invar false false 1 integer? \"foo\"   nil) ; Pred failure example\n  (-invar false false 1 zero?    \"foo\"   nil) ; Pred error example\n  (-invar false false 1 zero?    (/ 5 0) nil) ; Form error example\n  )\n\n                                                    \n                                                                             \n                                              \n                                                 \n                                              \n                                                                      \n                                                                 \n\n                                                                          \n                                                        \n                                                     \n                                                           \n\n                                                                     \n                                                                          \n                                 \n                                       \n                                                                             \n                             \n                              \n                                                 \n                                         \n\n              \n                                  \n\n                 \n\n                     \n                               \n                                                                  \n\n                                                 \n                                                                                     \n\n                     \n                                      \n                                        \n                   \n                                                              \n                                                                               \n\n                                                        \n                                                        \n               \n                    \n                       \n                                                                                        \n                      \n                     \n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/truss/impl.cljx\n"]}