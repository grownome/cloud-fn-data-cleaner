{"version":3,"file":"cljs.core.async.impl.timers.js","sources":["cljs/core/async/impl/timers.cljs"],"mappings":"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","names":["cljs.core.async.impl.timers/MAX_LEVEL","cljs.core.async.impl.timers/P","var_args","G__32392","cljs.core.async.impl.timers/random-level","js/Error","cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1","level","js/Math","this__5797__auto__","writer__5798__auto__","opt__5799__auto__","cljs.core/-write","cljs.core.async.impl.timers/SkipListNode","cljs.core.async.impl.timers/->SkipListNode","key","val","forward","coll","x__6080__auto__","cljs.core/-conj","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","G__32396","cljs.core.async.impl.timers/skip-list-node","cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3","k","v","arr","js/Array","i","G__32401","cljs.core.async.impl.timers/least-greater-node","x","cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4","update","temp__5455__auto__","x'","cljs.core.async.impl.timers/SkipList","cljs.core.async.impl.timers/->SkipList","header","new-level","cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0","links","nx","node","cljs.core/LazySeq","cljs.core/cons","iter","pr-pair","keyval","cljs.core.async.impl.timers/skip-list","cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.timers/timeouts-map","cljs.core.async.impl.timers/TIMEOUT_RESOLUTION_MS","cljs.core.async.impl.timers/timeout","msecs","timeout","js/Date","me","or__5126__auto__","and__5114__auto__","timeout-channel","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.dispatch/queue-delay","cljs.core.async.impl.protocols/close!","cljs.core/List"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.timers\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.channels :as channels]\n            [cljs.core.async.impl.dispatch :as dispatch]))\n\n(def MAX_LEVEL 15) ;; 16 levels\n(def P (/ 1 2))\n\n(defn random-level\n  ([] (random-level 0))\n  ([level]\n    (if (and (< (.random js/Math) P)\n             (< level MAX_LEVEL))\n      (recur (inc level))\n      level)))\n\n(deftype SkipListNode [key ^:mutable val forward]\n  ISeqable\n  (-seq [coll]\n    (list key val))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll)))\n\n(defn skip-list-node\n  ([level] (skip-list-node nil nil level))\n  ([k v level]\n    (let [arr (make-array (inc level))]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (aset arr i nil)\n          (recur (inc i))))\n      (SkipListNode. k v arr))))\n\n(defn least-greater-node\n  ([x k level] (least-greater-node x k level nil))\n  ([x k level update]\n    (if-not (neg? level)\n      (let [x (loop [x x]\n                (if-let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                  (if (< (.-key x') k)\n                    (recur x')\n                    x)\n                  x))]\n        (when-not (nil? update)\n          (aset update level x))\n        (recur x k (dec level) update))\n      x)))\n\n(deftype SkipList [header ^:mutable level]\n  Object\n  (put [coll k v]\n    (let [update (make-array MAX_LEVEL)\n          x (least-greater-node header k level update)\n          x (aget (.-forward x) 0)]\n      (if (and (not (nil? x)) (== (.-key x) k))\n        (set! (.-val x) v)\n        (let [new-level (random-level)]\n          (when (> new-level level)\n            (loop [i (inc level)]\n              (when (<= i (inc new-level))\n                (aset update i header)\n                (recur (inc i))))\n            (set! level new-level))\n          (let [x (skip-list-node k v (make-array new-level))]\n            (loop [i 0]\n              (when (<= i level)\n                (let [links (.-forward (aget update i))]\n                  (aset (.-forward x) i (aget links i))\n                  (aset links i x)))))))))\n\n  (remove [coll k]\n    (let [update (make-array MAX_LEVEL)\n          x (least-greater-node header k level update)\n          x (when-not (zero? (alength (.-forward x)))\n              (aget (.-forward x) 0))]\n      (when (and (not (nil? x)) (== (.-key x) k))\n        (loop [i 0]\n          (when (<= i level)\n            (let [links (.-forward (aget update i))]\n              (if (identical? x (when (< i (alength links))\n                                  (aget links i)))\n                (do\n                  (aset links i (aget (.-forward x) i))\n                  (recur (inc i)))\n                (recur (inc i))))))\n        (while (and (< 0 level (alength (.-forward header)))\n                    (nil? (aget (.-forward header) level)))\n          (set! level (dec level))))))\n\n  (ceilingEntry [coll k]\n    (loop [x header level level]\n      (if-not (neg? level)\n        (let [nx (loop [x x]\n                   (let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                     (when-not (nil? x')\n                       (if (>= (.-key x') k)\n                         x'\n                         (recur x')))))]\n          (if-not (nil? nx)\n            (recur nx (dec level))\n            (recur x (dec level))))\n        (when-not (identical? x header)\n          x))))\n  \n  (floorEntry [coll k]\n    (loop [x header level level]\n      (if-not (neg? level)\n        (let [nx (loop [x x]\n                   (let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                     (if-not (nil? x')\n                       (if (> (.-key x') k)\n                         x\n                         (recur x'))\n                       (when (zero? level)\n                         x))))]\n          (if nx\n            (recur nx (dec level))\n            (recur x (dec level))))\n        (when-not (identical? x header)\n          x))))\n\n  ISeqable\n  (-seq [coll]\n    (letfn [(iter [node]\n              (lazy-seq\n                (when-not (nil? node)\n                  (cons [(.-key node) (.-val node)]\n                    (iter (aget (.-forward node) 0))))))]\n      (iter (aget (.-forward header) 0))))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (let [pr-pair (fn [keyval]\n                    (pr-sequential-writer writer pr-writer \"\" \" \" \"\" opts keyval))]\n      (pr-sequential-writer writer pr-pair \"{\" \", \" \"}\" opts coll))))\n\n(defn skip-list []\n  (SkipList. (skip-list-node 0) 0))\n\n(def timeouts-map (skip-list))\n\n(def TIMEOUT_RESOLUTION_MS 10)\n\n(defn timeout\n  \"returns a channel that will close after msecs\"\n  [msecs]\n  (let [timeout (+ (.valueOf (js/Date.)) msecs)\n        me (.ceilingEntry timeouts-map timeout)]\n    (or (when (and me (< (.-key me) (+ timeout TIMEOUT_RESOLUTION_MS)))\n          (.-val me))\n        (let [timeout-channel (channels/chan nil)]\n          (.put timeouts-map timeout timeout-channel)\n          (dispatch/queue-delay\n            (fn []\n              (.remove timeouts-map timeout)\n              (impl/close! timeout-channel))\n            msecs)\n          timeout-channel))))\n\n"]}