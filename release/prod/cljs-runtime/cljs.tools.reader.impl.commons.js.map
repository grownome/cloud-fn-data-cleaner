{"version":3,"file":"cljs.tools.reader.impl.commons.js","sources":["cljs/tools/reader/impl/commons.cljs"],"mappings":"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","names":["cljs.tools.reader.impl.commons/number-literal?","reader","initch","cljs.tools.reader.impl.utils/numeric?","cljs.tools.reader.impl.commons/read-past","pred","rdr","ch","cljs.tools.reader.impl.commons/skip-line","cljs.tools.reader.impl.utils/newline?","cljs.tools.reader.impl.commons/int-pattern","cljs.tools.reader.impl.commons/ratio-pattern","cljs.tools.reader.impl.commons/float-pattern","cljs.tools.reader.impl.commons/match-int","s","m","cljs.core/vec","cljs.core/re-find","negate?","a","G__33521","js/parseInt","n","bn","G__33523","G__33524","js/isNaN","cljs.tools.reader.impl.commons/match-ratio","numerator","denominator","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.commons/match-float","G__33535","js/parseFloat","cljs.tools.reader.impl.commons/matches?","pattern","vec__33538","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","match","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.commons/parse-symbol","token","ns-idx","ns","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/count","sym","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","var_args","args__6412__auto__","len__6405__auto__","i__6406__auto__","argseq__6413__auto__","cljs.core/IndexedSeq","cljs.tools.reader.impl.commons/read-comment","seq33562","G__33563","cljs.core/first","cljs.core/next","_","cljs.tools.reader.impl.commons/throwing-reader","msg","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.commons\n  (:refer-clojure :exclude [char])\n  (:require\n   [cljs.tools.reader.impl.errors :refer [reader-error]]\n   [cljs.tools.reader.reader-types :refer [peek-char read-char]]\n   [cljs.tools.reader.impl.utils :refer [numeric? newline? char]]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn ^boolean number-literal?\n  \"Checks whether the reader is at the start of a number literal\"\n  [^not-native reader initch]\n  (or (numeric? initch)\n      (and (or (identical? \\+ initch) (identical?  \\- initch))\n           (numeric? (peek-char reader)))))\n\n(defn read-past\n  \"Read until first character that doesn't match pred, returning\n   char.\"\n  [pred ^not-native rdr]\n  (loop [ch (read-char rdr)]\n    (if ^boolean (pred ch)\n      (recur (read-char rdr))\n      ch)))\n\n(defn skip-line\n  \"Advances the reader to the end of a line. Returns the reader\"\n  [^not-native reader]\n  (loop []\n    (when-not (newline? (read-char reader))\n      (recur)))\n  reader)\n\n(def int-pattern #\"^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$\")\n(def ratio-pattern #\"([-+]?[0-9]+)/([0-9]+)\")\n(def float-pattern #\"([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?\")\n\n(defn- match-int\n  [s]\n  (let [m (vec (re-find int-pattern s))]\n    (if-not (nil? (m 2))\n      0\n      (let [^boolean negate? (identical? \"-\" (m 1))\n            a (cond\n               (not (nil? (m 3))) [(m 3) 10]\n               (not (nil? (m 4))) [(m 4) 16]\n               (not (nil? (m 5))) [(m 5) 8]\n               (not (nil? (m 7))) [(m 7) (js/parseInt (m 6))]\n               :else              [nil nil])\n            n (a 0)]\n        (when-not (nil? n)\n          (let [bn (js/parseInt n (a 1))\n                bn (if negate? (* -1 bn) bn)]\n            (when-not (js/isNaN bn)\n              bn)))))))\n\n(defn- match-ratio\n  [s]\n  (let [m (vec (re-find ratio-pattern s))\n        numerator (m 1)\n        denominator (m 2)\n        numerator (if (re-find #\"^\\+\" numerator)\n                    (subs numerator 1)\n                    numerator)]\n    (/ (-> numerator   js/parseInt) ;;; No ratio type in cljs\n       (-> denominator js/parseInt)))); So will convert to js/Number\n\n(defn- match-float\n  [s]\n  (let [m (vec (re-find float-pattern s))]\n    (if-not (nil? (m 4)) ;; for BigDecimal \"10.03M\", as all parsed to js/Number\n      (js/parseFloat (m 1))\n      (js/parseFloat s))))\n\n(defn ^boolean matches? [pattern s]\n  (let [[match] (re-find pattern s)]\n    (identical? match s)))\n\n(defn match-number [s]\n  (if (matches? int-pattern s)\n    (match-int s)\n    (if (matches? float-pattern s)\n      (match-float s)\n      (when (matches? ratio-pattern s)\n        (match-ratio s)))))\n\n(defn parse-symbol\n  \"Parses a string into a vector of the namespace and symbol\"\n  [token]\n  (when-not (or (identical? \"\" token)\n                (true? (.test #\":$\" token))\n                (true? (.test #\"^::\" token)))\n    (let [ns-idx (.indexOf token \"/\")\n          ns (when (pos? ns-idx)\n               (subs token 0 ns-idx))]\n      (if-not (nil? ns)\n        (let [ns-idx (inc ns-idx)]\n          (when-not (== ns-idx (count token))\n            (let [sym (subs token ns-idx)]\n              (when (and (not (numeric? (nth sym 0)))\n                         (not (identical? \"\" sym))\n                         (false? (.test #\":$\" ns))\n                         (or (identical? sym \"/\")\n                             (== -1 (.indexOf sym \"/\"))))\n                [ns sym]))))\n        (when (or (identical? token \"/\")\n                  (== -1 (.indexOf token \"/\")))\n          [nil token])))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read-comment\n  [rdr & _]\n  (skip-line rdr))\n\n(defn throwing-reader\n  [msg]\n  (fn [rdr & _]\n    (reader-error rdr msg)))\n"]}