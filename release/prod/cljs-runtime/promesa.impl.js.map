{"version":3,"file":"promesa.impl.js","sources":["promesa/impl.cljc"],"mappings":"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","names":["promesa.impl/Promise","js/Promise.noConflict","cljs.core/PROTOCOL_SENTINEL","it","cb","p1__32424#","p1__32425#","p1__32426#","goog.object/set","promesa.protocols/IPromise","G__32427","promesa.protocols/-map","G__32428","G__32429","G__32430","promesa.protocols/-bind","G__32431","G__32432","G__32433","promesa.protocols/-catch","G__32434","G__32435","promesa.impl/resolved","v","promesa.impl/rejected","promesa.protocols/IPromiseFactory","G__32463","promesa.protocols/-promise","G__32464","G__32465","G__32466","G__32467","G__32468","G__32472","G__32473","G__32474","G__32475","G__32476","G__32477","G__32479","G__32480","G__32481","G__32482","G__32483","G__32484","func","p","js/Error","e","promesa.impl/promise->str","promesa.protocols/-pending?","promesa.protocols/-rejected?","promesa.protocols/-extract","writer","opts","cljs.core/-write"],"sourcesContent":[";; Copyright (c) 2015-2016 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns promesa.impl\n  \"Implementation of promise protocols.\"\n  (:require [promesa.protocols :as pt]\n            #?(:cljs [org.bluebird]))\n  #?(:clj (:import java.util.concurrent.CompletableFuture\n                   java.util.concurrent.CompletionStage\n                   java.util.concurrent.TimeoutException\n                   java.util.concurrent.ExecutionException\n                   java.util.concurrent.CompletionException\n                   java.util.concurrent.Executor\n                   java.util.concurrent.Executors\n                   java.util.concurrent.ForkJoinPool\n                   java.util.function.Function\n                   java.util.function.Supplier)))\n\n;; --- Global Constants\n\n#?(:clj\n   (def ^:redef +executor+\n     (ForkJoinPool/commonPool)))\n\n#?(:cljs\n   (def ^:const Promise (js/Promise.noConflict)))\n\n;; --- Promise Impl\n\n#?(:cljs\n   (extend-type Promise\n     pt/IPromise\n     (-map [it cb]\n       (.then it #(cb %)))\n     (-bind [it cb]\n       (.then it #(cb %)))\n     (-catch [it cb]\n       (.caught it #(cb %)))\n\n     pt/IState\n     (-extract [it]\n       (if (.isRejected it)\n         (.reason it)\n         (.value it)))\n     (-resolved? [it]\n       (.isFulfilled it))\n     (-rejected? [it]\n       (.isRejected it))\n     (-pending? [it]\n       (.isPending it))))\n\n(declare resolved)\n\n#?(:cljs\n   (extend-type default\n     pt/IPromise\n     (-map [it cb]\n       (pt/-map (resolved it) cb))\n     (-bind [it cb]\n       (pt/-bind (resolved it) cb))\n     (-catch [it cb]\n       (pt/-catch (resolved it) cb))))\n\n#?(:clj\n   (extend-type CompletableFuture\n     pt/ICancellable\n     (-cancel [it]\n       (.cancel it true))\n     (-cancelled? [it]\n       (.isCancelled it))\n\n     pt/IPromise\n     (-map [it cb]\n       (let [binds (clojure.lang.Var/getThreadBindingFrame)\n             func (reify Function\n                    (apply [_ v]\n                      (clojure.lang.Var/resetThreadBindingFrame binds)\n                      (cb v)))]\n         (.thenApplyAsync it ^Function func ^Executor +executor+)))\n\n     (-bind [it cb]\n       (let [binds (clojure.lang.Var/getThreadBindingFrame)\n             func (reify Function\n                    (apply [_ v]\n                      (clojure.lang.Var/resetThreadBindingFrame binds)\n                      (cb v)))]\n         (.thenComposeAsync it ^Function func ^Executor +executor+)))\n\n     (-catch [it cb]\n       (let [binds (clojure.lang.Var/getThreadBindingFrame)\n             func (reify Function\n                    (apply [_ e]\n                      (clojure.lang.Var/resetThreadBindingFrame binds)\n                      (if (instance? CompletionException e)\n                        (cb (.getCause ^Exception e))\n                        (cb e))))]\n         (.exceptionally it ^Function func)))\n\n     pt/IState\n     (-extract [it]\n       (try\n         (.getNow it nil)\n         (catch ExecutionException e\n           (.getCause e))\n         (catch CompletionException e\n           (.getCause e))))\n\n     (-resolved? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (.isDone it)))\n\n     (-rejected? [it]\n       (.isCompletedExceptionally it))\n\n     (-pending? [it]\n       (and (not (.isCompletedExceptionally it))\n            (not (.isCancelled it))\n            (not (.isDone it))))))\n\n;; --- Promise Factory Impl\n\n(defn resolved\n  [v]\n  #?(:cljs (.resolve Promise v)\n     :clj (let [p (CompletableFuture.)]\n            (.complete p v)\n            p)))\n\n(defn rejected\n  [v]\n  #?(:cljs (.reject Promise v)\n     :clj (let [p (CompletableFuture.)]\n            (.completeExceptionally p v)\n            p)))\n\n#?(:clj\n   (extend-protocol pt/IPromiseFactory\n     clojure.lang.Fn\n     (-promise [func]\n       (let [p (CompletableFuture.)\n             reject #(.completeExceptionally p %)\n             resolve #(.complete p %)]\n         (try\n           (func resolve reject)\n           (catch Throwable e\n             (reject e)))\n         p))\n\n     Throwable\n     (-promise [e]\n       (rejected e))\n\n     CompletionStage\n     (-promise [cs] cs)\n\n     Object\n     (-promise [v]\n       (resolved v))\n\n     nil\n     (-promise [v]\n       (resolved v)))\n\n   :cljs\n   (extend-protocol pt/IPromiseFactory\n     function\n     (-promise [func]\n       (Promise. func))\n\n     Promise\n     (-promise [p] p)\n\n     js/Error\n     (-promise [e]\n       (rejected e))\n\n     object\n     (-promise [v]\n       (resolved v))\n\n     number\n     (-promise [v]\n       (resolved v))\n\n     boolean\n     (-promise [v]\n       (resolved v))\n\n     string\n     (-promise [v]\n       (resolved v))\n\n     nil\n     (-promise [v]\n       (resolved v))))\n\n;; --- Pretty printing\n\n(defn promise->str\n  [p]\n  (str \"#<Promise[\"\n       (cond\n         (pt/-pending? p) \"~\"\n         (pt/-rejected? p) (str \"error=\" (pt/-extract p))\n         :else (str \"value=\" (pt/-extract p)))\n       \"]>\"))\n\n#?(:clj\n   (defmethod print-method java.util.concurrent.CompletionStage\n     [p ^java.io.Writer writer]\n     (.write writer ^String (promise->str p)))\n   :cljs\n   (extend-type Promise\n     IPrintWithWriter\n     (-pr-writer [p writer opts]\n       (-write writer (promise->str p)))))\n"]}