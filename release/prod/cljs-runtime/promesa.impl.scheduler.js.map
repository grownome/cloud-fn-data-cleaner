{"version":3,"file":"promesa.impl.scheduler.js","sources":["promesa/impl/scheduler.cljc"],"mappings":";;;AAoCG,wCAAA,xCAAOA,wFACJC,IAAIC;AADP,AAEE,IAAMC,YAAU,yBAAA,zBAACC;AAAjB,AACE,AAAA,GAAA,OAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAA,wGAAA;kBAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;iEAFDL,WAAIC,mBACCC,/FACJ,AAAA,YAAAE,oGAAAE;;;;AAAA,AAAA,AAAA,AAAAF,+FAAA;kBAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;;AAAA,AAAA,AAAA,AAAAF,6GAAA;kBAEeU;;AAFf,AAAA,YAAA,RAEeA;AAFf,AAAA,OAAAP,gBAEmBN;;;;AAFnB,AAAA,AAAA,AAAAG,iGAAAI;;AAAA,AAAA,AAAA,AAAAJ,0HAAA;kBAKgBU;;AALhB,AAAA,YAAA,RAKgBA;AALhB,AAAA,OAAAP,gBAKoBL;;;;AALpB,AAAA,AAAA,AAAAE,gHAAA;kBAMYU;;AANZ,AAAA,YAAA,RAMYA;AANZ,AAOI,oBAAA,AAAAP,gBAAWL;AAAX;;AAAA,AACE,wCAAA,xCAACa,uBAAQb;;AACT,OAACc,aAAgBhB;;;;;AATvB,AAAA,AAAAI,gEAAA;;AAAA,AAAA,0FAAA,wDAAA,2DAAA,mEAAA;;;;AAAA,AAAA,AAAAA,sEAAA;;AAAA,AAAA,AAAAA,yEAAA;;AAAA,AAAA,AAAAA,8EAAA;kBAAAK,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;;AAAA,AAAAG,4DAAA;4FAFDb,QAAIC,gBACCC,cACJI;iEAFDN,QAAIC,gBACCC,zFACJ,AAAA,YAAAE,2FAAAE;;;;AAAAF;;iEAFDJ,IAAIC,YACCC,jFACJ,YAAAE,+EAAA;;AA6CJ,mCAAA,nCAAMa;AAAN,AAEE,AAAA,GAAA,OAAAC;AAAA;AAAA,AAAA,AAAA;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAA,AAAAA,wGAAA,WAAAC,OAAAC;;AAAA,AAAA,IAAAD,aAAA;AAAA,AAAA,YAAAD,qDAAAE;;;AAAA,AAAA,AAAA,AAAAF,+FAAA,WAAAC;;AAAA,AAAA,IAAAA,aAAA;AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAF,+FAAAV;;AAAA,AAAA,AAAA,AAAAU,gHAAA,WAEcJ,EAAEQ,GAAGC;;AAFnB,AAAA,YAAA,RAEcT;AAFd,AAGI,IAAMb,cAAM,yBAAA,zBAACE;IACPqB,OAAK;;AAAA,AACE,IAAA,AACE,QAACD,qCAAAA,uCAAAA;UADH,AAGI,mCAAA,nCAACR,uBAAQd;;;IACpBD,MAAI,AAACyB,WAAcD,KAAKF;AAN9B,AAOE,OAACvB,sCAAeC,IAAIC;;;AAV1B,AAAA,AAAAiB,gEAAA;AAAA,AAAA,0FAAA;;;AAAA,AAAA,AAAAA,sEAAA;;AAAA,AAAA,AAAAA,yEAAA;;AAAA,AAAA,AAAAA,8EAAA,WAAAT,mBAAAC,qBAAAC;AAAA,AAAA,OAAAC,iBAAAF,qBAAA;;;AAAA,AAAAW,4DAAA,gFAAAD;AAAA,AAAA,YAAAF,qDAAAE;;;AAAAF;;AAAA,YAAAA,qDAAA;;AAgBL;;;AAAaQ,+CAEX,KAAAC,gBAAA;AAAA,AAAO,OAACV;GAAR;AAEF,kCAAA,lCAAMW,4EACHN,GAAGC;AADN,AAEE,mCAAA,AAAAhB,5BAACsB,4CAAcH,8CAAYJ,GAAGC","names":["promesa.impl.scheduler/scheduled-task","cur","done?","cancelled","cljs.core/volatile!","promesa.impl.scheduler/t_promesa$impl$scheduler32445","_32447","meta32446","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","this__5797__auto__","writer__5798__auto__","opt__5799__auto__","cljs.core/-write","promesa.impl.scheduler/->t_promesa$impl$scheduler32445","_","cljs.core/vreset!","js/clearTimeout","promesa.impl.scheduler/scheduler","promesa.impl.scheduler/t_promesa$impl$scheduler32448","_32450","meta32449","promesa.impl.scheduler/->t_promesa$impl$scheduler32448","ms","func","task","js/setTimeout","promesa.impl.scheduler/+scheduler+","cljs.core/Delay","promesa.impl.scheduler/schedule","promesa.protocols/-schedule"],"sourcesContent":[";; Copyright (c) 2015-2016 Andrey Antukh <niwi@niwi.nz>\n;; All rights reserved.\n;;\n;; Redistribution and use in source and binary forms, with or without\n;; modification, are permitted provided that the following conditions\n;; are met:\n;;\n;; 1. Redistributions of source code must retain the above copyright\n;;    notice, this list of conditions and the following disclaimer.\n;; 2. Redistributions in binary form must reproduce the above copyright\n;;    notice, this list of conditions and the following disclaimer in the\n;;    documentation and/or other materials provided with the distribution.\n;;\n;; THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\n;; IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n;; OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\n;; IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\n;; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n;; NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\n;; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n(ns promesa.impl.scheduler\n  \"Scheduler helpers implementation. This is private api\n  and should not used directly.\"\n  (:require [promesa.protocols :as pt])\n  #?(:clj\n     (:import java.util.concurrent.ScheduledExecutorService\n              java.util.concurrent.Executors\n              java.util.concurrent.Future\n              java.util.concurrent.TimeUnit\n              java.util.concurrent.TimeoutException)))\n\n#?(:cljs\n   (defn- scheduled-task\n     [cur done?]\n     (let [cancelled (volatile! false)]\n       (reify\n         cljs.core/IPending\n         (-realized? [_] @done?)\n\n         pt/ICancellable\n         (-cancelled? [_] @cancelled)\n         (-cancel [_]\n           (when-not @cancelled\n             (vreset! cancelled true)\n             (js/clearTimeout cur))))))\n\n   :clj\n   (defn- scheduled-task\n     [^Future fut]\n     (reify\n       clojure.lang.IDeref\n       (deref [_]\n         (.get fut))\n\n       clojure.lang.IBlockingDeref\n       (deref [_ ms default]\n         (try\n           (.get fut ms TimeUnit/MILLISECONDS)\n           (catch TimeoutException e\n             default)))\n\n       clojure.lang.IPending\n       (isRealized [_] (and (.isDone fut)\n                            (not (.isCancelled fut))))\n\n       pt/ICancellable\n       (-cancelled? [_]\n         (.isCancelled fut))\n       (-cancel [_]\n         (when-not (.isCancelled fut)\n           (.cancel fut true))))))\n\n#?(:clj\n   (extend-type ScheduledExecutorService\n     pt/IScheduler\n     (-schedule [this ms func]\n       (let [fut (.schedule this ^Runnable func ^long ms TimeUnit/MILLISECONDS)]\n         (scheduled-task fut)))))\n\n#?(:cljs\n   (defn scheduler\n     []\n     (reify\n       pt/IScheduler\n       (-schedule [_ ms func]\n         (let [done? (volatile! false)\n               task (fn []\n                      (try\n                        (func)\n                        (finally\n                          (vreset! done? true))))\n               cur (js/setTimeout task ms)]\n           (scheduled-task cur done?)))))\n   :clj\n   (defn- scheduler\n     []\n     (Executors/newScheduledThreadPool 1)))\n\n(def ^:redef +scheduler+\n  \"A default lazy scheduler instance.\"\n  (delay (scheduler)))\n\n(defn schedule\n  [ms func]\n  (pt/-schedule @+scheduler+ ms func))\n"]}