{"version":3,"file":"taoensso.timbre.appenders.core.js","sources":["taoensso/timbre/appenders/core.cljs"],"mappings":"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","names":["var_args","args__6412__auto__","len__6405__auto__","i__6406__auto__","argseq__6413__auto__","cljs.core/IndexedSeq","taoensso.timbre.appenders.core/println-appender","p__39239","vec__39240","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","seq39238","cljs.core/seq","_opts","data","map__39243","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","output_","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","cljs.core/force","taoensso.timbre.appenders.core/console-appender","p__39249","vec__39250","seq39248","opts","js/console","level->logger","level","or__5126__auto__","G__39254","cljs.core/Keyword","js/Error","js/console.trace","js/console.debug","js/console.info","js/console.warn","js/console.error","js/console.log","temp__5457__auto__","logger","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","output","G__39256","fexpr__39255","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","args","vargs","temp__5455__auto__","err","cljs.core/cons","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","taoensso.timbre.appenders.core/console-?appender"],"sourcesContent":["(ns taoensso.timbre.appenders.core\n  \"Core Timbre appenders without any special dependency requirements.\n  These can be aliased into the main Timbre ns for convenience.\"\n  {:author \"Peter Taoussanis (@ptaoussanis)\"}\n       \n           \n                            \n                                                    \n\n        \n  (:require\n   [clojure.string  :as str]\n   [taoensso.encore :as enc :refer-macros [have have?]]))\n\n;; TODO Add a simple official rolling spit appender?\n\n;;;; Println appender (clj & cljs)\n\n                                                     \n                                                      \n                                      \n\n     \n                                     \n                                        \n\n                                                                       \n\n(defn println-appender\n  \"Returns a simple `println` appender for Clojure/Script.\n  Use with ClojureScript requires that `cljs.core/*print-fn*` be set.\n\n  :stream (clj only) - e/o #{:auto :*out* :*err* :std-err :std-out <io-stream>}.\"\n\n  ;; Unfortunately no easy way to check if *print-fn* is set. Metadata on the\n  ;; default throwing fn would be nice...\n\n  [&                                                    [_opts]]\n  (let [            \n                          \n                                           \n                                           \n                       ]\n\n    {:enabled?   true\n     :async?     false\n     :min-level  nil\n     :rate-limit nil\n     :output-fn  :inherit\n     :fn\n     (fn [data]\n       (let [{:keys [output_]} data]\n                (println (force output_))\n              \n                     \n                           \n                                                       \n                             \n                             \n                         \n\n                                  \n                                                    \n                                                      ))}))\n\n(comment (println-appender))\n\n;;;; Spit appender (clj only)\n\n     \n                   \n                                                      \n                            \n                                       \n                              \n                   \n                    \n                  \n                  \n                       \n      \n                  \n                                  \n           \n                                                                \n                                     \n                                             \n                                         \n                                                     \n                                                     \n                                                                  \n\n                                                     \n                                                                       \n\n(comment\n  (spit-appender)\n  (let [f (:fn (spit-appender))]\n    (enc/qb 1000 (f {:output_ \"boo\"}))))\n\n;;;; js/console appender (cljs only)\n\n      \n(defn console-appender\n  \"Returns a simple js/console appender for ClojureScript.\n\n  For accurate line numbers in Chrome, add these Blackbox[1] patterns:\n    `/taoensso/timbre/appenders/core\\\\.js$`\n    `/taoensso/timbre\\\\.js$`\n    `/cljs/core\\\\.js$`\n\n  [1] Ref. https://goo.gl/ZejSvR\"\n\n  ;; TODO Any way of using something like `Function.prototype.bind`\n  ;; (Ref. https://goo.gl/IZzkQB) to get accurate line numbers in all\n  ;; browsers w/o the need for Blackboxing?\n\n  [& [opts]]\n  {:enabled?   true\n   :async?     false\n   :min-level  nil\n   :rate-limit nil\n   :output-fn  :inherit\n   :fn\n   (if (exists? js/console)\n     (let [;; Don't cache this; some libs dynamically replace js/console\n           level->logger\n           (fn [level]\n             (or\n               (case level\n                 :trace  js/console.trace\n                 :debug  js/console.debug\n                 :info   js/console.info\n                 :warn   js/console.warn\n                 :error  js/console.error\n                 :fatal  js/console.error\n                 :report js/console.info)\n               js/console.log))]\n\n       (fn [data]\n         (when-let [logger (level->logger (:level data))]\n\n           (if (or (:raw-console? data)\n                   (get-in data [:?meta :raw-console?])) ; Undocumented\n\n             (let [output\n                   ((:output-fn data)\n                    (assoc data\n                      :msg_  \"\"\n                      :?err nil))\n\n                   args ; (<output> ?<raw-error> <raw-arg1> <raw-arg2> ...)\n                   (let [vargs (:vargs data)]\n                     (if-let [err (:?err data)]\n                       (cons output (cons err vargs))\n                       (cons output           vargs)))]\n\n               (.apply logger js/console (into-array args)))\n             (.call    logger js/console (force (:output_ data)))))))\n\n     (fn [data] nil))})\n\n(comment (console-appender))\n\n;;;; Deprecated\n\n       (def console-?appender \"DEPRECATED\" console-appender)\n\n;;;;;;;;;;;; This file autogenerated from src/taoensso/timbre/appenders/core.cljx\n"]}