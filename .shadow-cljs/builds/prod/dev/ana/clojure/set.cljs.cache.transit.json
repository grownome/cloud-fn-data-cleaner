["^ ","~:output",["^ ","~:js","goog.provide('clojure.set');\ngoog.require('cljs.core');\nclojure.set.bubble_max_key = (function clojure$set$bubble_max_key(k,coll){\n\nvar max = cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.max_key,k,coll);\nreturn cljs.core.cons(max,cljs.core.remove.cljs$core$IFn$_invoke$arity$2(((function (max){\nreturn (function (p1__4694_SHARP_){\nreturn (max === p1__4694_SHARP_);\n});})(max))\n,coll));\n});\n/**\n * Return a set that is the union of the input sets\n */\nclojure.set.union = (function clojure$set$union(var_args){\nvar G__4707 = arguments.length;\nswitch (G__4707) {\ncase 0:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$0();\n\nbreak;\ncase 1:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4546__auto__ = [];\nvar len__4531__auto___4721 = arguments.length;\nvar i__4532__auto___4722 = (0);\nwhile(true){\nif((i__4532__auto___4722 < len__4531__auto___4721)){\nargs_arr__4546__auto__.push((arguments[i__4532__auto___4722]));\n\nvar G__4724 = (i__4532__auto___4722 + (1));\ni__4532__auto___4722 = G__4724;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\nreturn clojure.set.union.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\n\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$0 = (function (){\nreturn cljs.core.PersistentHashSet.EMPTY;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s2,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.conj,s1,s2);\n}\n});\n\nclojure.set.union.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key(cljs.core.count,cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.into,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.union.cljs$lang$applyTo = (function (seq4703){\nvar G__4704 = cljs.core.first(seq4703);\nvar seq4703__$1 = cljs.core.next(seq4703);\nvar G__4705 = cljs.core.first(seq4703__$1);\nvar seq4703__$2 = cljs.core.next(seq4703__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4704,G__4705,seq4703__$2);\n});\n\nclojure.set.union.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the intersection of the input sets\n */\nclojure.set.intersection = (function clojure$set$intersection(var_args){\nvar G__4752 = arguments.length;\nswitch (G__4752) {\ncase 1:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4546__auto__ = [];\nvar len__4531__auto___4780 = arguments.length;\nvar i__4532__auto___4781 = (0);\nwhile(true){\nif((i__4532__auto___4781 < len__4531__auto___4780)){\nargs_arr__4546__auto__.push((arguments[i__4532__auto___4781]));\n\nvar G__4785 = (i__4532__auto___4781 + (1));\ni__4532__auto___4781 = G__4785;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\nreturn clojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\n\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nwhile(true){\nif((cljs.core.count(s2) < cljs.core.count(s1))){\nvar G__4792 = s2;\nvar G__4793 = s1;\ns1 = G__4792;\ns2 = G__4793;\ncontinue;\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (s1,s2){\nreturn (function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn result;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n}\n});})(s1,s2))\n,s1,s1);\n}\nbreak;\n}\n});\n\nclojure.set.intersection.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nvar bubbled_sets = clojure.set.bubble_max_key((function (p1__4740_SHARP_){\nreturn (- cljs.core.count(p1__4740_SHARP_));\n}),cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic(sets,s2,cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([s1], 0)));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.intersection,cljs.core.first(bubbled_sets),cljs.core.rest(bubbled_sets));\n});\n\n/** @this {Function} */\nclojure.set.intersection.cljs$lang$applyTo = (function (seq4745){\nvar G__4746 = cljs.core.first(seq4745);\nvar seq4745__$1 = cljs.core.next(seq4745);\nvar G__4747 = cljs.core.first(seq4745__$1);\nvar seq4745__$2 = cljs.core.next(seq4745__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4746,G__4747,seq4745__$2);\n});\n\nclojure.set.intersection.cljs$lang$maxFixedArity = (2);\n\n/**\n * Return a set that is the first set without elements of the remaining sets\n */\nclojure.set.difference = (function clojure$set$difference(var_args){\nvar G__4809 = arguments.length;\nswitch (G__4809) {\ncase 1:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$1((arguments[(0)]));\n\nbreak;\ncase 2:\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ndefault:\nvar args_arr__4546__auto__ = [];\nvar len__4531__auto___4832 = arguments.length;\nvar i__4532__auto___4833 = (0);\nwhile(true){\nif((i__4532__auto___4833 < len__4531__auto___4832)){\nargs_arr__4546__auto__.push((arguments[i__4532__auto___4833]));\n\nvar G__4834 = (i__4532__auto___4833 + (1));\ni__4532__auto___4833 = G__4834;\ncontinue;\n} else {\n}\nbreak;\n}\n\nvar argseq__4547__auto__ = (new cljs.core.IndexedSeq(args_arr__4546__auto__.slice((2)),(0),null));\nreturn clojure.set.difference.cljs$core$IFn$_invoke$arity$variadic((arguments[(0)]),(arguments[(1)]),argseq__4547__auto__);\n\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$1 = (function (s1){\nreturn s1;\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$2 = (function (s1,s2){\nif((cljs.core.count(s1) < cljs.core.count(s2))){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (result,item){\nif(cljs.core.contains_QMARK_(s2,item)){\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(result,item);\n} else {\nreturn result;\n}\n}),s1,s1);\n} else {\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(cljs.core.disj,s1,s2);\n}\n});\n\nclojure.set.difference.cljs$core$IFn$_invoke$arity$variadic = (function (s1,s2,sets){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(clojure.set.difference,s1,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(sets,s2));\n});\n\n/** @this {Function} */\nclojure.set.difference.cljs$lang$applyTo = (function (seq4805){\nvar G__4806 = cljs.core.first(seq4805);\nvar seq4805__$1 = cljs.core.next(seq4805);\nvar G__4807 = cljs.core.first(seq4805__$1);\nvar seq4805__$2 = cljs.core.next(seq4805__$1);\nvar self__4518__auto__ = this;\nreturn self__4518__auto__.cljs$core$IFn$_invoke$arity$variadic(G__4806,G__4807,seq4805__$2);\n});\n\nclojure.set.difference.cljs$lang$maxFixedArity = (2);\n\n/**\n * Returns a set of the elements for which pred is true\n */\nclojure.set.select = (function clojure$set$select(pred,xset){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (s,k){\nif(cljs.core.truth_((pred.cljs$core$IFn$_invoke$arity$1 ? pred.cljs$core$IFn$_invoke$arity$1(k) : pred.call(null,k)))){\nreturn s;\n} else {\nreturn cljs.core.disj.cljs$core$IFn$_invoke$arity$2(s,k);\n}\n}),xset,xset);\n});\n/**\n * Returns a rel of the elements of xrel with only the keys in ks\n */\nclojure.set.project = (function clojure$set$project(xrel,ks){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__4843_SHARP_){\nreturn cljs.core.select_keys(p1__4843_SHARP_,ks);\n}),xrel));\n});\n/**\n * Returns the map with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename_keys = (function clojure$set$rename_keys(map,kmap){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,p__4845){\nvar vec__4846 = p__4845;\nvar old = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4846,(0),null);\nvar new$ = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4846,(1),null);\nif(cljs.core.contains_QMARK_(map,old)){\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,new$,cljs.core.get.cljs$core$IFn$_invoke$arity$2(map,old));\n} else {\nreturn m;\n}\n}),cljs.core.apply.cljs$core$IFn$_invoke$arity$3(cljs.core.dissoc,map,cljs.core.keys(kmap)),kmap);\n});\n/**\n * Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\n */\nclojure.set.rename = (function clojure$set$rename(xrel,kmap){\nreturn cljs.core.set(cljs.core.map.cljs$core$IFn$_invoke$arity$2((function (p1__4854_SHARP_){\nreturn clojure.set.rename_keys(p1__4854_SHARP_,kmap);\n}),xrel));\n});\n/**\n * Returns a map of the distinct values of ks in the xrel mapped to a\n *   set of the maps in xrel with the corresponding values of ks.\n */\nclojure.set.index = (function clojure$set$index(xrel,ks){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m,x){\nvar ik = cljs.core.select_keys(x,ks);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.conj.cljs$core$IFn$_invoke$arity$2(cljs.core.get.cljs$core$IFn$_invoke$arity$3(m,ik,cljs.core.PersistentHashSet.EMPTY),x));\n}),cljs.core.PersistentArrayMap.EMPTY,xrel);\n});\n/**\n * Returns the map with the vals mapped to the keys.\n */\nclojure.set.map_invert = (function clojure$set$map_invert(m){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3((function (m__$1,p__4879){\nvar vec__4880 = p__4879;\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4880,(0),null);\nvar v = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4880,(1),null);\nreturn cljs.core.assoc.cljs$core$IFn$_invoke$arity$3(m__$1,v,k);\n}),cljs.core.PersistentArrayMap.EMPTY,m);\n});\n/**\n * When passed 2 rels, returns the rel corresponding to the natural\n *   join. When passed an additional keymap, joins on the corresponding\n *   keys.\n */\nclojure.set.join = (function clojure$set$join(var_args){\nvar G__4892 = arguments.length;\nswitch (G__4892) {\ncase 2:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$2((arguments[(0)]),(arguments[(1)]));\n\nbreak;\ncase 3:\nreturn clojure.set.join.cljs$core$IFn$_invoke$arity$3((arguments[(0)]),(arguments[(1)]),(arguments[(2)]));\n\nbreak;\ndefault:\nthrow (new Error([\"Invalid arity: \",cljs.core.str.cljs$core$IFn$_invoke$arity$1(arguments.length)].join('')));\n\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$2 = (function (xrel,yrel){\nif(((cljs.core.seq(xrel)) && (cljs.core.seq(yrel)))){\nvar ks = clojure.set.intersection.cljs$core$IFn$_invoke$arity$2(cljs.core.set(cljs.core.keys(cljs.core.first(xrel))),cljs.core.set(cljs.core.keys(cljs.core.first(yrel))));\nvar vec__4898 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel], null):new cljs.core.PersistentVector(null, 2, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4898,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4898,(1),null);\nvar idx = clojure.set.index(r,ks);\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (ks,vec__4898,r,s,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__4906 = cljs.core.select_keys(x,ks);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__4906) : idx.call(null,G__4906));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,ks,vec__4898,r,s,idx){\nreturn (function (p1__4883_SHARP_,p2__4884_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4883_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__4884_SHARP_,x], 0)));\n});})(found,ks,vec__4898,r,s,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(ks,vec__4898,r,s,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n} else {\nreturn cljs.core.PersistentHashSet.EMPTY;\n}\n});\n\nclojure.set.join.cljs$core$IFn$_invoke$arity$3 = (function (xrel,yrel,km){\nvar vec__4915 = (((cljs.core.count(xrel) <= cljs.core.count(yrel)))?new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [xrel,yrel,clojure.set.map_invert(km)], null):new cljs.core.PersistentVector(null, 3, 5, cljs.core.PersistentVector.EMPTY_NODE, [yrel,xrel,km], null));\nvar r = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4915,(0),null);\nvar s = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4915,(1),null);\nvar k = cljs.core.nth.cljs$core$IFn$_invoke$arity$3(vec__4915,(2),null);\nvar idx = clojure.set.index(r,cljs.core.vals(k));\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (vec__4915,r,s,k,idx){\nreturn (function (ret,x){\nvar found = (function (){var G__4925 = clojure.set.rename_keys(cljs.core.select_keys(x,cljs.core.keys(k)),k);\nreturn (idx.cljs$core$IFn$_invoke$arity$1 ? idx.cljs$core$IFn$_invoke$arity$1(G__4925) : idx.call(null,G__4925));\n})();\nif(cljs.core.truth_(found)){\nreturn cljs.core.reduce.cljs$core$IFn$_invoke$arity$3(((function (found,vec__4915,r,s,k,idx){\nreturn (function (p1__4885_SHARP_,p2__4886_SHARP_){\nreturn cljs.core.conj.cljs$core$IFn$_invoke$arity$2(p1__4885_SHARP_,cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic(cljs.core.prim_seq.cljs$core$IFn$_invoke$arity$2([p2__4886_SHARP_,x], 0)));\n});})(found,vec__4915,r,s,k,idx))\n,ret,found);\n} else {\nreturn ret;\n}\n});})(vec__4915,r,s,k,idx))\n,cljs.core.PersistentHashSet.EMPTY,s);\n});\n\nclojure.set.join.cljs$lang$maxFixedArity = 3;\n\n/**\n * Is set1 a subset of set2?\n */\nclojure.set.subset_QMARK_ = (function clojure$set$subset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) <= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__4940_SHARP_){\nreturn cljs.core.contains_QMARK_(set2,p1__4940_SHARP_);\n}),set1)));\n});\n/**\n * Is set1 a superset of set2?\n */\nclojure.set.superset_QMARK_ = (function clojure$set$superset_QMARK_(set1,set2){\nreturn (((cljs.core.count(set1) >= cljs.core.count(set2))) && (cljs.core.every_QMARK_((function (p1__4944_SHARP_){\nreturn cljs.core.contains_QMARK_(set1,p1__4944_SHARP_);\n}),set2)));\n});\n","~:ns-info",["^ ","~:rename-macros",null,"~:renames",["^ "],"~:meta",["^ ","~:file","clojure/set.cljs","~:line",11,"~:column",8,"~:end-line",11,"~:end-column",19,"~:doc","Set operations such as union/intersection.","~:author","Rich Hickey"],"~:ns-aliases",["^ ","~$firebase-admin","~$shadow.js.shim.module$firebase_admin"],"~:use-macros",null,"~:excludes",["~#set",[]],"~:name","~$clojure.set","~:op","~:ns","~:imports",null,"~:requires",["^ ","~$cljs.core","^I","~$goog","^J"],"~:seen",["^B",[]],"~:uses",null,"~:require-macros",["^ ","^I","^I"],"~:form",["~#list",["~$ns","^D"]],"~:flags",["^ "],"~:js-deps",["^ "],"~:deps",["^J","^I"]],"^F","^D","~:resource-id",["~:shadow.build.classpath/resource","clojure/set.cljs"],"~:compiled-at",1535829918241,"~:resource-name","clojure/set.cljs","~:warnings",[],"~:source",";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n","~:reader-features",["^B",["~:cljs"]],"~:source-map",["^ ","~i12",["^ ","~i0",[["^ ","~:gcol",0,"~:gline",2],["^ ","^12",29,"^13",2],["^ ","^12",0,"^13",3],["^ ","^12",0,"^13",3]],"~i7",[["^ ","^12",0,"^13",2,"^C","clojure.set/bubble-max-key"]],"~i23",[["^ ","^12",66,"^13",2,"^C","k"]],"~i25",[["^ ","^12",68,"^13",2,"^C","coll"]]],"~i15",["^ ","~i2",[["^ ","^12",0,"^13",4],["^ ","^12",0,"^13",5]],"~i8",[["^ ","^12",4,"^13",4,"^C","max"]],"^11",[["^ ","^12",10,"^13",4]],"~i13",[["^ ","^12",10,"^13",4,"^C","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"]],"~i19",[["^ ","^12",56,"^13",4,"^C","cljs.core/max-key"]],"~i27",[["^ ","^12",74,"^13",4,"^C","k"]],"~i29",[["^ ","^12",76,"^13",4,"^C","coll"]]],"~i16",["^ ","~i4",[["^ ","^12",0,"^13",5]],"~i5",[["^ ","^12",7,"^13",5,"^C","cljs.core/cons"]],"~i10",[["^ ","^12",22,"^13",5,"^C","max"]],"~i14",[["^ ","^12",26,"^13",5],["^ ","^12",73,"^13",5],["^ ","^12",18,"^13",6,"^C","p1__4694#"],["^ ","^12",0,"^13",7]],"^16",[["^ ","^12",26,"^13",5,"^C","cljs.core.remove.cljs$core$IFn$_invoke$arity$2"]],"^14",[["^ ","^12",0,"^13",7],["^ ","^12",16,"^13",7,"^C","p1__4694#"]],"~i35",[["^ ","^12",8,"^13",7,"^C","max"]],"~i42",[["^ ","^12",1,"^13",9,"^C","coll"]]],"~i18",["^ ","~i0",[["^ ","^12",0,"^13",11],["^ ","^12",0,"^13",11],["^ ","^12",20,"^13",14],["^ ","^12",48,"^13",14,"^C","var_args"],["^ ","^12",0,"^13",15],["^ ","^12",0,"^13",15],["^ ","^12",4,"^13",15,"^C","G__4707"],["^ ","^12",14,"^13",15],["^ ","^12",14,"^13",15],["^ ","^12",0,"^13",16],["^ ","^12",0,"^13",16],["^ ","^12",8,"^13",16,"^C","G__4707"],["^ ","^12",5,"^13",17],["^ ","^12",0,"^13",18],["^ ","^12",7,"^13",18,"^C","clojure.set/union"],["^ ","^12",5,"^13",21],["^ ","^12",0,"^13",22],["^ ","^12",7,"^13",22,"^C","clojure.set/union"],["^ ","^12",55,"^13",22],["^ ","^12",56,"^13",22],["^ ","^12",66,"^13",22],["^ ","^12",5,"^13",25],["^ ","^12",0,"^13",26],["^ ","^12",7,"^13",26,"^C","clojure.set/union"],["^ ","^12",55,"^13",26],["^ ","^12",56,"^13",26],["^ ","^12",66,"^13",26],["^ ","^12",72,"^13",26],["^ ","^12",73,"^13",26],["^ ","^12",83,"^13",26],["^ ","^12",0,"^13",30],["^ ","^12",4,"^13",30,"^C","args-arr__4546__auto__"],["^ ","^12",29,"^13",30],["^ ","^12",0,"^13",31],["^ ","^12",0,"^13",31],["^ ","^12",4,"^13",31,"^C","len__4531__auto__"],["^ ","^12",29,"^13",31],["^ ","^12",29,"^13",31],["^ ","^12",0,"^13",32],["^ ","^12",0,"^13",32],["^ ","^12",4,"^13",32,"^C","i__4532__auto__"],["^ ","^12",27,"^13",32],["^ ","^12",0,"^13",34],["^ ","^12",0,"^13",34],["^ ","^12",3,"^13",34],["^ ","^12",4,"^13",34,"^C","i__4532__auto__"],["^ ","^12",27,"^13",34,"^C","len__4531__auto__"],["^ ","^12",0,"^13",35],["^ ","^12",0,"^13",35],["^ ","^12",0,"^13",35,"^C","args-arr__4546__auto__"],["^ ","^12",28,"^13",35],["^ ","^12",29,"^13",35],["^ ","^12",39,"^13",35,"^C","i__4532__auto__"],["^ ","^12",0,"^13",37],["^ ","^12",14,"^13",37],["^ ","^12",15,"^13",37,"^C","i__4532__auto__"],["^ ","^12",38,"^13",37],["^ ","^12",0,"^13",41],["^ ","^12",0,"^13",45],["^ ","^12",4,"^13",45,"^C","argseq__4547__auto__"],["^ ","^12",27,"^13",45],["^ ","^12",32,"^13",45,"^C","cljs.core/IndexedSeq"],["^ ","^12",53,"^13",45],["^ ","^12",53,"^13",45,"^C","args-arr__4546__auto__"],["^ ","^12",82,"^13",45],["^ ","^12",87,"^13",45],["^ ","^12",91,"^13",45],["^ ","^12",0,"^13",46],["^ ","^12",0,"^13",46],["^ ","^12",7,"^13",46,"^C","clojure.set/union"],["^ ","^12",62,"^13",46],["^ ","^12",63,"^13",46],["^ ","^12",73,"^13",46],["^ ","^12",79,"^13",46],["^ ","^12",80,"^13",46],["^ ","^12",90,"^13",46],["^ ","^12",96,"^13",46,"^C","argseq__4547__auto__"],["^ ","^12",0,"^13",51],["^ ","^12",0,"^13",51],["^ ","^12",50,"^13",51],["^ ","^12",0,"^13",52],["^ ","^12",0,"^13",52],["^ ","^12",0,"^13",55],["^ ","^12",0,"^13",55],["^ ","^12",50,"^13",55],["^ ","^12",0,"^13",56],["^ ","^12",0,"^13",59],["^ ","^12",0,"^13",59],["^ ","^12",50,"^13",59],["^ ","^12",0,"^13",60],["^ ","^12",0,"^13",67],["^ ","^12",0,"^13",67],["^ ","^12",0,"^13",67],["^ ","^12",57,"^13",67],["^ ","^12",0,"^13",68],["^ ","^12",0,"^13",72],["^ ","^12",0,"^13",73],["^ ","^12",0,"^13",73],["^ ","^12",38,"^13",73],["^ ","^12",49,"^13",73,"^C","seq4703"],["^ ","^12",0,"^13",74],["^ ","^12",0,"^13",74],["^ ","^12",4,"^13",74,"^C","G__4704"],["^ ","^12",14,"^13",74],["^ ","^12",14,"^13",74,"^C","cljs.core/first"],["^ ","^12",30,"^13",74,"^C","seq4703"],["^ ","^12",4,"^13",75,"^C","seq4703"],["^ ","^12",18,"^13",75],["^ ","^12",18,"^13",75,"^C","cljs.core/next"],["^ ","^12",33,"^13",75,"^C","seq4703"],["^ ","^12",4,"^13",76,"^C","G__4705"],["^ ","^12",14,"^13",76],["^ ","^12",14,"^13",76,"^C","cljs.core/first"],["^ ","^12",30,"^13",76,"^C","seq4703"],["^ ","^12",4,"^13",77,"^C","seq4703"],["^ ","^12",18,"^13",77],["^ ","^12",18,"^13",77,"^C","cljs.core/next"],["^ ","^12",33,"^13",77,"^C","seq4703"],["^ ","^12",0,"^13",78],["^ ","^12",0,"^13",78],["^ ","^12",4,"^13",78,"^C","self__4518__auto__"],["^ ","^12",25,"^13",78],["^ ","^12",0,"^13",79],["^ ","^12",0,"^13",79],["^ ","^12",7,"^13",79,"^C","self__4518__auto__"],["^ ","^12",63,"^13",79,"^C","G__4704"],["^ ","^12",71,"^13",79,"^C","G__4705"],["^ ","^12",79,"^13",79,"^C","seq4703"],["^ ","^12",0,"^13",82],["^ ","^12",0,"^13",82],["^ ","^12",44,"^13",82],["^ ","^12",0,"^13",84]],"~i6",[["^ ","^12",0,"^13",14,"^C","clojure.set/union"],["^ ","^12",0,"^13",51,"^C","clojure.set/union"],["^ ","^12",0,"^13",55,"^C","clojure.set/union"],["^ ","^12",0,"^13",59,"^C","clojure.set/union"],["^ ","^12",0,"^13",67,"^C","clojure.set/union"],["^ ","^12",0,"^13",73,"^C","clojure.set/union"],["^ ","^12",0,"^13",82,"^C","clojure.set/union"]]],"~i21",["^ ","~i4",[["^ ","^12",61,"^13",55,"^C","s1"]],"~i8",[["^ ","^12",0,"^13",56,"^C","s1"]]],"~i22",["^ ","~i4",[["^ ","^12",61,"^13",59,"^C","s1"]],"~i7",[["^ ","^12",64,"^13",59,"^C","s2"]]],"^14",["^ ","~i5",[["^ ","^12",0,"^13",60]],"~i9",[["^ ","^12",3,"^13",60]],"^11",[["^ ","^12",4,"^13",60]],"^17",[["^ ","^12",4,"^13",60,"^C","cljs.core/count"]],"^18",[["^ ","^12",20,"^13",60,"^C","s1"]],"^14",[["^ ","^12",26,"^13",60]],"~i24",[["^ ","^12",26,"^13",60,"^C","cljs.core/count"]],"~i30",[["^ ","^12",42,"^13",60,"^C","s2"]]],"^1C",["^ ","~i7",[["^ ","^12",0,"^13",61]],"~i8",[["^ ","^12",7,"^13",61,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",61,"^C","cljs.core/conj"]],"~i20",[["^ ","^12",69,"^13",61,"^C","s2"]],"^14",[["^ ","^12",72,"^13",61,"^C","s1"]]],"^15",["^ ","~i7",[["^ ","^12",0,"^13",63]],"~i8",[["^ ","^12",7,"^13",63,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",63,"^C","cljs.core/conj"]],"^1E",[["^ ","^12",69,"^13",63,"^C","s1"]],"^14",[["^ ","^12",72,"^13",63,"^C","s2"]]],"~i26",["^ ","~i4",[["^ ","^12",68,"^13",67,"^C","s1"]],"~i7",[["^ ","^12",71,"^13",67,"^C","s2"]],"^11",[["^ ","^12",74,"^13",67,"^C","sets"]]],"^19",["^ ","~i5",[["^ ","^12",0,"^13",68],["^ ","^12",0,"^13",69]],"~i11",[["^ ","^12",4,"^13",68,"^C","bubbled-sets"]],"^1C",[["^ ","^12",19,"^13",68]],"^15",[["^ ","^12",19,"^13",68,"^C","clojure.set/bubble-max-key"]],"~i40",[["^ ","^12",46,"^13",68,"^C","cljs.core/count"]],"~i46",[["^ ","^12",62,"^13",68]],"~i47",[["^ ","^12",62,"^13",68,"^C","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic"]],"~i52",[["^ ","^12",114,"^13",68,"^C","sets"]],"~i57",[["^ ","^12",119,"^13",68,"^C","s2"]],"~i60",[["^ ","^12",172,"^13",68,"^C","s1"]]],"~i28",["^ ","~i7",[["^ ","^12",0,"^13",69]],"~i8",[["^ ","^12",7,"^13",69,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",69,"^C","cljs.core/into"]],"^1E",[["^ ","^12",69,"^13",69]],"^1A",[["^ ","^12",69,"^13",69,"^C","cljs.core/first"]],"^19",[["^ ","^12",85,"^13",69,"^C","bubbled-sets"]],"~i41",[["^ ","^12",99,"^13",69]],"^1?",[["^ ","^12",99,"^13",69,"^C","cljs.core/rest"]],"^1J",[["^ ","^12",114,"^13",69,"^C","bubbled-sets"]]],"^1D",["^ ","~i0",[["^ ","^12",0,"^13",84],["^ ","^12",0,"^13",84],["^ ","^12",27,"^13",87],["^ ","^12",62,"^13",87,"^C","var_args"],["^ ","^12",0,"^13",88],["^ ","^12",0,"^13",88],["^ ","^12",4,"^13",88,"^C","G__4752"],["^ ","^12",14,"^13",88],["^ ","^12",14,"^13",88],["^ ","^12",0,"^13",89],["^ ","^12",0,"^13",89],["^ ","^12",8,"^13",89,"^C","G__4752"],["^ ","^12",5,"^13",90],["^ ","^12",0,"^13",91],["^ ","^12",7,"^13",91,"^C","clojure.set/intersection"],["^ ","^12",62,"^13",91],["^ ","^12",63,"^13",91],["^ ","^12",73,"^13",91],["^ ","^12",5,"^13",94],["^ ","^12",0,"^13",95],["^ ","^12",7,"^13",95,"^C","clojure.set/intersection"],["^ ","^12",62,"^13",95],["^ ","^12",63,"^13",95],["^ ","^12",73,"^13",95],["^ ","^12",79,"^13",95],["^ ","^12",80,"^13",95],["^ ","^12",90,"^13",95],["^ ","^12",0,"^13",99],["^ ","^12",4,"^13",99,"^C","args-arr__4546__auto__"],["^ ","^12",29,"^13",99],["^ ","^12",0,"^13",100],["^ ","^12",0,"^13",100],["^ ","^12",4,"^13",100,"^C","len__4531__auto__"],["^ ","^12",29,"^13",100],["^ ","^12",29,"^13",100],["^ ","^12",0,"^13",101],["^ ","^12",0,"^13",101],["^ ","^12",4,"^13",101,"^C","i__4532__auto__"],["^ ","^12",27,"^13",101],["^ ","^12",0,"^13",103],["^ ","^12",0,"^13",103],["^ ","^12",3,"^13",103],["^ ","^12",4,"^13",103,"^C","i__4532__auto__"],["^ ","^12",27,"^13",103,"^C","len__4531__auto__"],["^ ","^12",0,"^13",104],["^ ","^12",0,"^13",104],["^ ","^12",0,"^13",104,"^C","args-arr__4546__auto__"],["^ ","^12",28,"^13",104],["^ ","^12",29,"^13",104],["^ ","^12",39,"^13",104,"^C","i__4532__auto__"],["^ ","^12",0,"^13",106],["^ ","^12",14,"^13",106],["^ ","^12",15,"^13",106,"^C","i__4532__auto__"],["^ ","^12",38,"^13",106],["^ ","^12",0,"^13",110],["^ ","^12",0,"^13",114],["^ ","^12",4,"^13",114,"^C","argseq__4547__auto__"],["^ ","^12",27,"^13",114],["^ ","^12",32,"^13",114,"^C","cljs.core/IndexedSeq"],["^ ","^12",53,"^13",114],["^ ","^12",53,"^13",114,"^C","args-arr__4546__auto__"],["^ ","^12",82,"^13",114],["^ ","^12",87,"^13",114],["^ ","^12",91,"^13",114],["^ ","^12",0,"^13",115],["^ ","^12",0,"^13",115],["^ ","^12",7,"^13",115,"^C","clojure.set/intersection"],["^ ","^12",69,"^13",115],["^ ","^12",70,"^13",115],["^ ","^12",80,"^13",115],["^ ","^12",86,"^13",115],["^ ","^12",87,"^13",115],["^ ","^12",97,"^13",115],["^ ","^12",103,"^13",115,"^C","argseq__4547__auto__"],["^ ","^12",0,"^13",120],["^ ","^12",0,"^13",120],["^ ","^12",57,"^13",120],["^ ","^12",0,"^13",121],["^ ","^12",0,"^13",124],["^ ","^12",0,"^13",124],["^ ","^12",57,"^13",124],["^ ","^12",0,"^13",126],["^ ","^12",0,"^13",147],["^ ","^12",0,"^13",147],["^ ","^12",0,"^13",147],["^ ","^12",64,"^13",147],["^ ","^12",0,"^13",148],["^ ","^12",0,"^13",154],["^ ","^12",0,"^13",155],["^ ","^12",0,"^13",155],["^ ","^12",45,"^13",155],["^ ","^12",56,"^13",155,"^C","seq4745"],["^ ","^12",0,"^13",156],["^ ","^12",0,"^13",156],["^ ","^12",4,"^13",156,"^C","G__4746"],["^ ","^12",14,"^13",156],["^ ","^12",14,"^13",156,"^C","cljs.core/first"],["^ ","^12",30,"^13",156,"^C","seq4745"],["^ ","^12",4,"^13",157,"^C","seq4745"],["^ ","^12",18,"^13",157],["^ ","^12",18,"^13",157,"^C","cljs.core/next"],["^ ","^12",33,"^13",157,"^C","seq4745"],["^ ","^12",4,"^13",158,"^C","G__4747"],["^ ","^12",14,"^13",158],["^ ","^12",14,"^13",158,"^C","cljs.core/first"],["^ ","^12",30,"^13",158,"^C","seq4745"],["^ ","^12",4,"^13",159,"^C","seq4745"],["^ ","^12",18,"^13",159],["^ ","^12",18,"^13",159,"^C","cljs.core/next"],["^ ","^12",33,"^13",159,"^C","seq4745"],["^ ","^12",0,"^13",160],["^ ","^12",0,"^13",160],["^ ","^12",4,"^13",160,"^C","self__4518__auto__"],["^ ","^12",25,"^13",160],["^ ","^12",0,"^13",161],["^ ","^12",0,"^13",161],["^ ","^12",7,"^13",161,"^C","self__4518__auto__"],["^ ","^12",63,"^13",161,"^C","G__4746"],["^ ","^12",71,"^13",161,"^C","G__4747"],["^ ","^12",79,"^13",161,"^C","seq4745"],["^ ","^12",0,"^13",164],["^ ","^12",0,"^13",164],["^ ","^12",51,"^13",164],["^ ","^12",0,"^13",166]],"~i6",[["^ ","^12",0,"^13",87,"^C","clojure.set/intersection"],["^ ","^12",0,"^13",120,"^C","clojure.set/intersection"],["^ ","^12",0,"^13",124,"^C","clojure.set/intersection"],["^ ","^12",0,"^13",147,"^C","clojure.set/intersection"],["^ ","^12",0,"^13",155,"^C","clojure.set/intersection"],["^ ","^12",0,"^13",164,"^C","clojure.set/intersection"]]],"~i32",["^ ","~i4",[["^ ","^12",68,"^13",120,"^C","s1"]],"~i8",[["^ ","^12",0,"^13",121,"^C","s1"]]],"~i33",["^ ","~i4",[["^ ","^12",68,"^13",124,"^C","s1"]],"~i7",[["^ ","^12",71,"^13",124,"^C","s2"]]],"~i34",["^ ","~i5",[["^ ","^12",0,"^13",126]],"~i9",[["^ ","^12",3,"^13",126]],"^11",[["^ ","^12",4,"^13",126]],"^17",[["^ ","^12",4,"^13",126,"^C","cljs.core/count"]],"^18",[["^ ","^12",20,"^13",126,"^C","s2"]],"^14",[["^ ","^12",26,"^13",126]],"^1C",[["^ ","^12",26,"^13",126,"^C","cljs.core/count"]],"^1D",[["^ ","^12",42,"^13",126,"^C","s1"]]],"^1>",["^ ","~i7",[["^ ","^12",0,"^13",127]],"^1=",[["^ ","^12",14,"^13",127,"^C","s2"]],"~i17",[["^ ","^12",14,"^13",128,"^C","s1"]]],"~i36",["^ ","~i7",[["^ ","^12",0,"^13",133]],"~i8",[["^ ","^12",7,"^13",133,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",133],["^ ","^12",0,"^13",135]],"^1E",[["^ ","^12",18,"^13",134,"^C","result"]],"^19",[["^ ","^12",25,"^13",134,"^C","item"]]],"~i37",["^ ","^18",[["^ ","^12",0,"^13",135]],"^14",[["^ ","^12",3,"^13",135]],"^1C",[["^ ","^12",3,"^13",135,"^C","cljs.core/contains?"]],"^1R",[["^ ","^12",29,"^13",135,"^C","s2"]],"^1U",[["^ ","^12",32,"^13",135,"^C","item"]]],"~i38",["^ ","~i7",[["^ ","^12",0,"^13",136,"^C","result"]]],"~i39",["^ ","^1A",[["^ ","^12",0,"^13",138]],"^1B",[["^ ","^12",7,"^13",138,"^C","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^19",[["^ ","^12",52,"^13",138,"^C","result"]],"^1R",[["^ ","^12",59,"^13",138,"^C","item"]]],"^1H",["^ ","~i8",[["^ ","^12",1,"^13",141,"^C","s1"]],"^1G",[["^ ","^12",4,"^13",141,"^C","s1"]]],"^1O",["^ ","~i4",[["^ ","^12",75,"^13",147,"^C","s1"]],"~i7",[["^ ","^12",78,"^13",147,"^C","s2"]],"^11",[["^ ","^12",81,"^13",147,"^C","sets"]]],"^1?",["^ ","~i5",[["^ ","^12",0,"^13",148],["^ ","^12",0,"^13",151]],"^1G",[["^ ","^12",4,"^13",148,"^C","bubbled-sets"]],"^1C",[["^ ","^12",19,"^13",148],["^ ","^12",46,"^13",148],["^ ","^12",57,"^13",148,"^C","p1__4740#"],["^ ","^12",0,"^13",149]],"^15",[["^ ","^12",19,"^13",148,"^C","clojure.set/bubble-max-key"]],"^1O",[["^ ","^12",0,"^13",149]],"~i44",[["^ ","^12",10,"^13",149],["^ ","^12",26,"^13",149,"^C","p1__4740#"]],"~i45",[["^ ","^12",10,"^13",149,"^C","cljs.core/count"]],"~i55",[["^ ","^12",3,"^13",150]],"~i56",[["^ ","^12",3,"^13",150,"^C","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic"]],"~i61",[["^ ","^12",55,"^13",150,"^C","sets"]],"~i66",[["^ ","^12",60,"^13",150,"^C","s2"]],"~i69",[["^ ","^12",113,"^13",150,"^C","s1"]]],"~i43",["^ ","~i7",[["^ ","^12",0,"^13",151]],"~i8",[["^ ","^12",7,"^13",151,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",151,"^C","clojure.set/intersection"]],"^1N",[["^ ","^12",79,"^13",151]],"^1:",[["^ ","^12",79,"^13",151,"^C","cljs.core/first"]],"^1>",[["^ ","^12",95,"^13",151,"^C","bubbled-sets"]],"~i49",[["^ ","^12",109,"^13",151]],"~i50",[["^ ","^12",109,"^13",151,"^C","cljs.core/rest"]],"^1Z",[["^ ","^12",124,"^13",151,"^C","bubbled-sets"]]],"^1Y",["^ ","~i0",[["^ ","^12",0,"^13",166],["^ ","^12",0,"^13",166],["^ ","^12",25,"^13",169],["^ ","^12",58,"^13",169,"^C","var_args"],["^ ","^12",0,"^13",170],["^ ","^12",0,"^13",170],["^ ","^12",4,"^13",170,"^C","G__4809"],["^ ","^12",14,"^13",170],["^ ","^12",14,"^13",170],["^ ","^12",0,"^13",171],["^ ","^12",0,"^13",171],["^ ","^12",8,"^13",171,"^C","G__4809"],["^ ","^12",5,"^13",172],["^ ","^12",0,"^13",173],["^ ","^12",7,"^13",173,"^C","clojure.set/difference"],["^ ","^12",60,"^13",173],["^ ","^12",61,"^13",173],["^ ","^12",71,"^13",173],["^ ","^12",5,"^13",176],["^ ","^12",0,"^13",177],["^ ","^12",7,"^13",177,"^C","clojure.set/difference"],["^ ","^12",60,"^13",177],["^ ","^12",61,"^13",177],["^ ","^12",71,"^13",177],["^ ","^12",77,"^13",177],["^ ","^12",78,"^13",177],["^ ","^12",88,"^13",177],["^ ","^12",0,"^13",181],["^ ","^12",4,"^13",181,"^C","args-arr__4546__auto__"],["^ ","^12",29,"^13",181],["^ ","^12",0,"^13",182],["^ ","^12",0,"^13",182],["^ ","^12",4,"^13",182,"^C","len__4531__auto__"],["^ ","^12",29,"^13",182],["^ ","^12",29,"^13",182],["^ ","^12",0,"^13",183],["^ ","^12",0,"^13",183],["^ ","^12",4,"^13",183,"^C","i__4532__auto__"],["^ ","^12",27,"^13",183],["^ ","^12",0,"^13",185],["^ ","^12",0,"^13",185],["^ ","^12",3,"^13",185],["^ ","^12",4,"^13",185,"^C","i__4532__auto__"],["^ ","^12",27,"^13",185,"^C","len__4531__auto__"],["^ ","^12",0,"^13",186],["^ ","^12",0,"^13",186],["^ ","^12",0,"^13",186,"^C","args-arr__4546__auto__"],["^ ","^12",28,"^13",186],["^ ","^12",29,"^13",186],["^ ","^12",39,"^13",186,"^C","i__4532__auto__"],["^ ","^12",0,"^13",188],["^ ","^12",14,"^13",188],["^ ","^12",15,"^13",188,"^C","i__4532__auto__"],["^ ","^12",38,"^13",188],["^ ","^12",0,"^13",192],["^ ","^12",0,"^13",196],["^ ","^12",4,"^13",196,"^C","argseq__4547__auto__"],["^ ","^12",27,"^13",196],["^ ","^12",32,"^13",196,"^C","cljs.core/IndexedSeq"],["^ ","^12",53,"^13",196],["^ ","^12",53,"^13",196,"^C","args-arr__4546__auto__"],["^ ","^12",82,"^13",196],["^ ","^12",87,"^13",196],["^ ","^12",91,"^13",196],["^ ","^12",0,"^13",197],["^ ","^12",0,"^13",197],["^ ","^12",7,"^13",197,"^C","clojure.set/difference"],["^ ","^12",67,"^13",197],["^ ","^12",68,"^13",197],["^ ","^12",78,"^13",197],["^ ","^12",84,"^13",197],["^ ","^12",85,"^13",197],["^ ","^12",95,"^13",197],["^ ","^12",101,"^13",197,"^C","argseq__4547__auto__"],["^ ","^12",0,"^13",202],["^ ","^12",0,"^13",202],["^ ","^12",55,"^13",202],["^ ","^12",0,"^13",203],["^ ","^12",0,"^13",206],["^ ","^12",0,"^13",206],["^ ","^12",55,"^13",206],["^ ","^12",0,"^13",207],["^ ","^12",0,"^13",220],["^ ","^12",0,"^13",220],["^ ","^12",0,"^13",220],["^ ","^12",62,"^13",220],["^ ","^12",0,"^13",221],["^ ","^12",0,"^13",224],["^ ","^12",0,"^13",225],["^ ","^12",0,"^13",225],["^ ","^12",43,"^13",225],["^ ","^12",54,"^13",225,"^C","seq4805"],["^ ","^12",0,"^13",226],["^ ","^12",0,"^13",226],["^ ","^12",4,"^13",226,"^C","G__4806"],["^ ","^12",14,"^13",226],["^ ","^12",14,"^13",226,"^C","cljs.core/first"],["^ ","^12",30,"^13",226,"^C","seq4805"],["^ ","^12",4,"^13",227,"^C","seq4805"],["^ ","^12",18,"^13",227],["^ ","^12",18,"^13",227,"^C","cljs.core/next"],["^ ","^12",33,"^13",227,"^C","seq4805"],["^ ","^12",4,"^13",228,"^C","G__4807"],["^ ","^12",14,"^13",228],["^ ","^12",14,"^13",228,"^C","cljs.core/first"],["^ ","^12",30,"^13",228,"^C","seq4805"],["^ ","^12",4,"^13",229,"^C","seq4805"],["^ ","^12",18,"^13",229],["^ ","^12",18,"^13",229,"^C","cljs.core/next"],["^ ","^12",33,"^13",229,"^C","seq4805"],["^ ","^12",0,"^13",230],["^ ","^12",0,"^13",230],["^ ","^12",4,"^13",230,"^C","self__4518__auto__"],["^ ","^12",25,"^13",230],["^ ","^12",0,"^13",231],["^ ","^12",0,"^13",231],["^ ","^12",7,"^13",231,"^C","self__4518__auto__"],["^ ","^12",63,"^13",231,"^C","G__4806"],["^ ","^12",71,"^13",231,"^C","G__4807"],["^ ","^12",79,"^13",231,"^C","seq4805"],["^ ","^12",0,"^13",234],["^ ","^12",0,"^13",234],["^ ","^12",49,"^13",234],["^ ","^12",0,"^13",236]],"~i6",[["^ ","^12",0,"^13",169,"^C","clojure.set/difference"],["^ ","^12",0,"^13",202,"^C","clojure.set/difference"],["^ ","^12",0,"^13",206,"^C","clojure.set/difference"],["^ ","^12",0,"^13",220,"^C","clojure.set/difference"],["^ ","^12",0,"^13",225,"^C","clojure.set/difference"],["^ ","^12",0,"^13",234,"^C","clojure.set/difference"]]],"^1J",["^ ","~i4",[["^ ","^12",66,"^13",202,"^C","s1"]],"~i8",[["^ ","^12",0,"^13",203,"^C","s1"]]],"~i48",["^ ","~i4",[["^ ","^12",66,"^13",206,"^C","s1"]],"~i7",[["^ ","^12",69,"^13",206,"^C","s2"]]],"^24",["^ ","~i5",[["^ ","^12",0,"^13",207]],"~i9",[["^ ","^12",3,"^13",207]],"^11",[["^ ","^12",4,"^13",207]],"^17",[["^ ","^12",4,"^13",207,"^C","cljs.core/count"]],"^18",[["^ ","^12",20,"^13",207,"^C","s1"]],"^14",[["^ ","^12",26,"^13",207]],"^1C",[["^ ","^12",26,"^13",207,"^C","cljs.core/count"]],"^1D",[["^ ","^12",42,"^13",207,"^C","s2"]]],"^25",["^ ","~i7",[["^ ","^12",0,"^13",208]],"~i8",[["^ ","^12",7,"^13",208,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",208],["^ ","^12",0,"^13",209]],"^1E",[["^ ","^12",65,"^13",208,"^C","result"]],"^19",[["^ ","^12",72,"^13",208,"^C","item"]]],"~i51",["^ ","^18",[["^ ","^12",0,"^13",209]],"^14",[["^ ","^12",3,"^13",209]],"^1C",[["^ ","^12",3,"^13",209,"^C","cljs.core/contains?"]],"^1R",[["^ ","^12",29,"^13",209,"^C","s2"]],"^1U",[["^ ","^12",32,"^13",209,"^C","item"]]],"^1K",["^ ","^1A",[["^ ","^12",0,"^13",210]],"^1B",[["^ ","^12",7,"^13",210,"^C","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^19",[["^ ","^12",52,"^13",210,"^C","result"]],"^1R",[["^ ","^12",59,"^13",210,"^C","item"]]],"~i53",["^ ","^1A",[["^ ","^12",0,"^13",212,"^C","result"]]],"~i54",["^ ","^16",[["^ ","^12",3,"^13",214,"^C","s1"]],"^1@",[["^ ","^12",6,"^13",214,"^C","s1"]]],"^1Z",["^ ","~i7",[["^ ","^12",0,"^13",216]],"~i8",[["^ ","^12",7,"^13",216,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",216,"^C","cljs.core/disj"]],"^1E",[["^ ","^12",69,"^13",216,"^C","s1"]],"^14",[["^ ","^12",72,"^13",216,"^C","s2"]]],"^1[",["^ ","~i4",[["^ ","^12",73,"^13",220,"^C","s1"]],"~i7",[["^ ","^12",76,"^13",220,"^C","s2"]],"^11",[["^ ","^12",79,"^13",220,"^C","sets"]]],"^1L",["^ ","~i5",[["^ ","^12",0,"^13",221]],"~i6",[["^ ","^12",7,"^13",221,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^17",[["^ ","^12",54,"^13",221,"^C","clojure.set/difference"]],"^1C",[["^ ","^12",77,"^13",221,"^C","s1"]],"^19",[["^ ","^12",80,"^13",221]],"^1N",[["^ ","^12",80,"^13",221,"^C","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1Q",[["^ ","^12",125,"^13",221,"^C","sets"]],"^1V",[["^ ","^12",130,"^13",221,"^C","s2"]]],"^1M",["^ ","~i0",[["^ ","^12",0,"^13",236],["^ ","^12",21,"^13",239],["^ ","^12",0,"^13",240]],"~i6",[["^ ","^12",0,"^13",239,"^C","clojure.set/select"]]],"~i62",["^ ","~i3",[["^ ","^12",50,"^13",239,"^C","pred"]],"~i8",[["^ ","^12",55,"^13",239,"^C","xset"]]],"~i63",["^ ","~i4",[["^ ","^12",0,"^13",240]],"~i5",[["^ ","^12",7,"^13",240,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^11",[["^ ","^12",54,"^13",240],["^ ","^12",0,"^13",241]],"^1S",[["^ ","^12",65,"^13",240,"^C","s"]],"^18",[["^ ","^12",67,"^13",240,"^C","k"]],"^1B",[["^ ","^12",0,"^13",241]],"^1F",[["^ ","^12",20,"^13",241]],"^19",[["^ ","^12",21,"^13",241,"^C","pred"],["^ ","^12",58,"^13",241,"^C","pred"],["^ ","^12",98,"^13",241,"^C","pred"]],"^1P",[["^ ","^12",93,"^13",241,"^C","k"],["^ ","^12",113,"^13",241,"^C","k"]],"^1>",[["^ ","^12",0,"^13",242,"^C","s"]],"^1U",[["^ ","^12",0,"^13",244]],"^1V",[["^ ","^12",7,"^13",244,"^C","cljs.core.disj.cljs$core$IFn$_invoke$arity$2"]],"^23",[["^ ","^12",52,"^13",244,"^C","s"]],"^1Y",[["^ ","^12",54,"^13",244,"^C","k"]]],"~i64",["^ ","^11",[["^ ","^12",3,"^13",246,"^C","xset"]],"^1S",[["^ ","^12",8,"^13",246,"^C","xset"]]],"^21",["^ ","~i0",[["^ ","^12",0,"^13",248],["^ ","^12",22,"^13",251],["^ ","^12",0,"^13",252]],"~i6",[["^ ","^12",0,"^13",251,"^C","clojure.set/project"]]],"~i68",["^ ","~i3",[["^ ","^12",52,"^13",251,"^C","xrel"]],"~i8",[["^ ","^12",57,"^13",251,"^C","ks"]]],"^22",["^ ","~i4",[["^ ","^12",0,"^13",252]],"~i5",[["^ ","^12",7,"^13",252,"^C","cljs.core/set"]],"~i9",[["^ ","^12",21,"^13",252],["^ ","^12",65,"^13",252],["^ ","^12",76,"^13",252,"^C","p1__4843#"],["^ ","^12",0,"^13",253]],"^1<",[["^ ","^12",21,"^13",252,"^C","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^16",[["^ ","^12",0,"^13",253],["^ ","^12",29,"^13",253,"^C","p1__4843#"]],"^1;",[["^ ","^12",7,"^13",253,"^C","cljs.core/select-keys"]],"^1D",[["^ ","^12",45,"^13",253,"^C","ks"]],"^1R",[["^ ","^12",3,"^13",254,"^C","xrel"]]],"~i71",["^ ","~i0",[["^ ","^12",0,"^13",256],["^ ","^12",26,"^13",259],["^ ","^12",0,"^13",260]],"~i6",[["^ ","^12",0,"^13",259,"^C","clojure.set/rename-keys"]]],"~i73",["^ ","~i3",[["^ ","^12",60,"^13",259,"^C","map"]],"~i7",[["^ ","^12",64,"^13",259,"^C","kmap"]]],"~i74",["^ ","~i4",[["^ ","^12",0,"^13",260]],"~i5",[["^ ","^12",7,"^13",260,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i75",["^ ","~i5",[["^ ","^12",54,"^13",260],["^ ","^12",67,"^13",260,"^C","p__4845"],["^ ","^12",0,"^13",261],["^ ","^12",0,"^13",261],["^ ","^12",4,"^13",261,"^C","vec__4846"],["^ ","^12",16,"^13",261,"^C","p__4845"],["^ ","^12",10,"^13",262],["^ ","^12",10,"^13",262,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",54,"^13",262,"^C","vec__4846"],["^ ","^12",64,"^13",262],["^ ","^12",68,"^13",262],["^ ","^12",11,"^13",263],["^ ","^12",11,"^13",263,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",55,"^13",263,"^C","vec__4846"],["^ ","^12",65,"^13",263],["^ ","^12",69,"^13",263],["^ ","^12",0,"^13",264]],"^1<",[["^ ","^12",65,"^13",260,"^C","m"]],"^17",[["^ ","^12",4,"^13",262,"^C","old"]],"^1S",[["^ ","^12",4,"^13",263,"^C","new"]]],"~i76",["^ ","~i7",[["^ ","^12",0,"^13",264]],"^1G",[["^ ","^12",3,"^13",264]],"^11",[["^ ","^12",3,"^13",264,"^C","cljs.core/contains?"]],"^1B",[["^ ","^12",29,"^13",264,"^C","map"]],"^1F",[["^ ","^12",33,"^13",264,"^C","old"]]],"~i77",["^ ","~i9",[["^ ","^12",0,"^13",265]],"^1<",[["^ ","^12",7,"^13",265,"^C","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^12",53,"^13",265,"^C","m"]],"^1@",[["^ ","^12",55,"^13",265,"^C","new"]],"^1B",[["^ ","^12",60,"^13",265]],"^14",[["^ ","^12",60,"^13",265,"^C","cljs.core.get.cljs$core$IFn$_invoke$arity$2"]],"^19",[["^ ","^12",104,"^13",265,"^C","map"]],"~i31",[["^ ","^12",108,"^13",265,"^C","old"]]],"~i78",["^ ","~i9",[["^ ","^12",0,"^13",267,"^C","m"]]],"~i79",["^ ","~i5",[["^ ","^12",3,"^13",269]],"~i6",[["^ ","^12",3,"^13",269,"^C","cljs.core.apply.cljs$core$IFn$_invoke$arity$3"]],"^11",[["^ ","^12",49,"^13",269,"^C","cljs.core/dissoc"]],"^18",[["^ ","^12",66,"^13",269,"^C","map"]],"^14",[["^ ","^12",70,"^13",269]],"^1C",[["^ ","^12",70,"^13",269,"^C","cljs.core/keys"]],"^1:",[["^ ","^12",85,"^13",269,"^C","kmap"]],"^1T",[["^ ","^12",92,"^13",269,"^C","kmap"]]],"~i81",["^ ","~i0",[["^ ","^12",0,"^13",271],["^ ","^12",21,"^13",274],["^ ","^12",0,"^13",275]],"~i6",[["^ ","^12",0,"^13",274,"^C","clojure.set/rename"]]],"~i83",["^ ","~i3",[["^ ","^12",50,"^13",274,"^C","xrel"]],"~i8",[["^ ","^12",55,"^13",274,"^C","kmap"]]],"~i84",["^ ","~i4",[["^ ","^12",0,"^13",275]],"~i5",[["^ ","^12",7,"^13",275,"^C","cljs.core/set"]],"~i9",[["^ ","^12",21,"^13",275],["^ ","^12",65,"^13",275],["^ ","^12",76,"^13",275,"^C","p1__4854#"],["^ ","^12",0,"^13",276]],"^1<",[["^ ","^12",21,"^13",275,"^C","cljs.core.map.cljs$core$IFn$_invoke$arity$2"]],"^16",[["^ ","^12",0,"^13",276],["^ ","^12",31,"^13",276,"^C","p1__4854#"]],"^1;",[["^ ","^12",7,"^13",276,"^C","clojure.set/rename-keys"]],"^1D",[["^ ","^12",47,"^13",276,"^C","kmap"]],"^1T",[["^ ","^12",3,"^13",277,"^C","xrel"]]],"~i86",["^ ","~i0",[["^ ","^12",0,"^13",279],["^ ","^12",20,"^13",283],["^ ","^12",0,"^13",284]],"~i6",[["^ ","^12",0,"^13",283,"^C","clojure.set/index"]]],"~i89",["^ ","~i3",[["^ ","^12",48,"^13",283,"^C","xrel"]],"~i8",[["^ ","^12",53,"^13",283,"^C","ks"]]],"~i90",["^ ","~i4",[["^ ","^12",0,"^13",284],["^ ","^12",3,"^13",287]],"~i5",[["^ ","^12",7,"^13",284,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]]],"~i91",["^ ","~i5",[["^ ","^12",54,"^13",284],["^ ","^12",0,"^13",285]],"^1<",[["^ ","^12",65,"^13",284,"^C","m"]],"^11",[["^ ","^12",67,"^13",284,"^C","x"]]],"~i92",["^ ","~i7",[["^ ","^12",0,"^13",285],["^ ","^12",0,"^13",286]],"^17",[["^ ","^12",4,"^13",285,"^C","ik"]],"^1;",[["^ ","^12",9,"^13",285]],"^1S",[["^ ","^12",9,"^13",285,"^C","cljs.core/select-keys"]],"^1:",[["^ ","^12",31,"^13",285,"^C","x"]],"^2D",[["^ ","^12",33,"^13",285,"^C","ks"]]],"~i93",["^ ","~i9",[["^ ","^12",0,"^13",286]],"^1<",[["^ ","^12",7,"^13",286,"^C","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1;",[["^ ","^12",53,"^13",286,"^C","m"]],"^1@",[["^ ","^12",55,"^13",286,"^C","ik"]],"^1A",[["^ ","^12",58,"^13",286]],"^1B",[["^ ","^12",58,"^13",286,"^C","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^19",[["^ ","^12",103,"^13",286],["^ ","^12",152,"^13",286]],"^1N",[["^ ","^12",103,"^13",286,"^C","cljs.core.get.cljs$core$IFn$_invoke$arity$3"]],"^1P",[["^ ","^12",147,"^13",286,"^C","m"]],"^1R",[["^ ","^12",149,"^13",286,"^C","ik"]],"^1?",[["^ ","^12",187,"^13",286,"^C","x"]]],"~i94",["^ ","~i8",[["^ ","^12",38,"^13",287,"^C","xrel"]]],"~i96",["^ ","~i0",[["^ ","^12",0,"^13",289],["^ ","^12",25,"^13",292],["^ ","^12",0,"^13",293]],"~i6",[["^ ","^12",0,"^13",292,"^C","clojure.set/map-invert"]]],"~i98",["^ ","~i3",[["^ ","^12",58,"^13",292,"^C","m"]],"~i6",[["^ ","^12",0,"^13",293],["^ ","^12",3,"^13",298]],"~i7",[["^ ","^12",7,"^13",293,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1=",[["^ ","^12",54,"^13",293],["^ ","^12",71,"^13",293,"^C","p__4879"],["^ ","^12",0,"^13",294],["^ ","^12",0,"^13",294],["^ ","^12",4,"^13",294,"^C","vec__4880"],["^ ","^12",16,"^13",294,"^C","p__4879"],["^ ","^12",8,"^13",295],["^ ","^12",8,"^13",295,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",52,"^13",295,"^C","vec__4880"],["^ ","^12",62,"^13",295],["^ ","^12",66,"^13",295],["^ ","^12",8,"^13",296],["^ ","^12",8,"^13",296,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",52,"^13",296,"^C","vec__4880"],["^ ","^12",62,"^13",296],["^ ","^12",66,"^13",296],["^ ","^12",0,"^13",297]],"^18",[["^ ","^12",65,"^13",293,"^C","m"]],"^1B",[["^ ","^12",4,"^13",295,"^C","k"]],"^1C",[["^ ","^12",4,"^13",296,"^C","v"]],"^1N",[["^ ","^12",0,"^13",297]],"^1:",[["^ ","^12",7,"^13",297,"^C","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3"]],"^1>",[["^ ","^12",53,"^13",297,"^C","m"]],"^1U",[["^ ","^12",59,"^13",297,"^C","v"]],"^1W",[["^ ","^12",61,"^13",297,"^C","k"]],"^1I",[["^ ","^12",38,"^13",298,"^C","m"]]],"~i100",["^ ","~i0",[["^ ","^12",0,"^13",300],["^ ","^12",0,"^13",300],["^ ","^12",19,"^13",305],["^ ","^12",46,"^13",305,"^C","var_args"],["^ ","^12",0,"^13",306],["^ ","^12",0,"^13",306],["^ ","^12",4,"^13",306,"^C","G__4892"],["^ ","^12",14,"^13",306],["^ ","^12",14,"^13",306],["^ ","^12",0,"^13",307],["^ ","^12",0,"^13",307],["^ ","^12",8,"^13",307,"^C","G__4892"],["^ ","^12",5,"^13",308],["^ ","^12",0,"^13",309],["^ ","^12",7,"^13",309,"^C","clojure.set/join"],["^ ","^12",54,"^13",309],["^ ","^12",55,"^13",309],["^ ","^12",65,"^13",309],["^ ","^12",71,"^13",309],["^ ","^12",72,"^13",309],["^ ","^12",82,"^13",309],["^ ","^12",5,"^13",312],["^ ","^12",0,"^13",313],["^ ","^12",7,"^13",313,"^C","clojure.set/join"],["^ ","^12",54,"^13",313],["^ ","^12",55,"^13",313],["^ ","^12",65,"^13",313],["^ ","^12",71,"^13",313],["^ ","^12",72,"^13",313],["^ ","^12",82,"^13",313],["^ ","^12",88,"^13",313],["^ ","^12",89,"^13",313],["^ ","^12",99,"^13",313],["^ ","^12",0,"^13",317],["^ ","^12",6,"^13",317],["^ ","^12",11,"^13",317,"^C","js/Error"],["^ ","^12",17,"^13",317],["^ ","^12",18,"^13",317],["^ ","^12",80,"^13",317],["^ ","^12",80,"^13",317],["^ ","^12",0,"^13",322],["^ ","^12",0,"^13",322],["^ ","^12",49,"^13",322],["^ ","^12",0,"^13",323],["^ ","^12",0,"^13",350],["^ ","^12",0,"^13",350],["^ ","^12",49,"^13",350],["^ ","^12",0,"^13",351],["^ ","^12",0,"^13",374],["^ ","^12",0,"^13",374],["^ ","^12",43,"^13",374],["^ ","^12",0,"^13",376]],"~i6",[["^ ","^12",0,"^13",305,"^C","clojure.set/join"],["^ ","^12",0,"^13",322,"^C","clojure.set/join"],["^ ","^12",0,"^13",350,"^C","clojure.set/join"],["^ ","^12",0,"^13",374,"^C","clojure.set/join"]]],"~i104",["^ ","~i4",[["^ ","^12",60,"^13",322,"^C","xrel"]],"~i9",[["^ ","^12",65,"^13",322,"^C","yrel"]]],"~i105",["^ ","~i3",[["^ ","^12",0,"^13",323],["^ ","^12",0,"^13",346]],"~i7",[["^ ","^12",3,"^13",323]],"^11",[["^ ","^12",5,"^13",323]],"^17",[["^ ","^12",5,"^13",323,"^C","cljs.core/seq"]],"^1S",[["^ ","^12",19,"^13",323,"^C","xrel"]],"^14",[["^ ","^12",30,"^13",323]],"^1C",[["^ ","^12",30,"^13",323,"^C","cljs.core/seq"]],"^1N",[["^ ","^12",44,"^13",323,"^C","yrel"]]],"~i106",["^ ","~i5",[["^ ","^12",0,"^13",324],["^ ","^12",4,"^13",325,"^C","vec__4898"],["^ ","^12",8,"^13",326],["^ ","^12",8,"^13",326,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",52,"^13",326,"^C","vec__4898"],["^ ","^12",62,"^13",326],["^ ","^12",66,"^13",326],["^ ","^12",8,"^13",327],["^ ","^12",8,"^13",327,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",52,"^13",327,"^C","vec__4898"],["^ ","^12",62,"^13",327],["^ ","^12",66,"^13",327],["^ ","^12",0,"^13",329]],"^1G",[["^ ","^12",4,"^13",324,"^C","ks"]],"^1=",[["^ ","^12",9,"^13",324]],"^16",[["^ ","^12",9,"^13",324,"^C","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2"]],"^1N",[["^ ","^12",64,"^13",324]],"^1:",[["^ ","^12",64,"^13",324,"^C","cljs.core/set"]],"^1Q",[["^ ","^12",78,"^13",324]],"^1R",[["^ ","^12",78,"^13",324,"^C","cljs.core/keys"]],"^1W",[["^ ","^12",93,"^13",324]],"^1H",[["^ ","^12",93,"^13",324,"^C","cljs.core/first"]],"^1I",[["^ ","^12",109,"^13",324,"^C","xrel"]],"^29",[["^ ","^12",117,"^13",324]],"^1Z",[["^ ","^12",117,"^13",324,"^C","cljs.core/set"]],"~i59",[["^ ","^12",131,"^13",324]],"^1M",[["^ ","^12",131,"^13",324,"^C","cljs.core/keys"]],"~i65",[["^ ","^12",146,"^13",324]],"^21",[["^ ","^12",146,"^13",324,"^C","cljs.core/first"]],"~i72",[["^ ","^12",162,"^13",324,"^C","yrel"]]],"~i107",["^ ","^11",[["^ ","^12",4,"^13",326,"^C","r"]],"^1=",[["^ ","^12",4,"^13",327,"^C","s"]],"^1S",[["^ ","^12",16,"^13",325],["^ ","^12",68,"^13",325],["^ ","^12",169,"^13",325]],"^1A",[["^ ","^12",18,"^13",325]],"^15",[["^ ","^12",19,"^13",325]],"^1F",[["^ ","^12",19,"^13",325,"^C","cljs.core/count"]],"^1P",[["^ ","^12",35,"^13",325,"^C","xrel"]],"^1V",[["^ ","^12",44,"^13",325]],"^1W",[["^ ","^12",44,"^13",325,"^C","cljs.core/count"]],"^1Y",[["^ ","^12",60,"^13",325,"^C","yrel"]]],"~i108",["^ ","^1E",[["^ ","^12",151,"^13",325,"^C","xrel"]],"^15",[["^ ","^12",156,"^13",325,"^C","yrel"]]],"~i109",["^ ","^1E",[["^ ","^12",252,"^13",325,"^C","yrel"]],"^15",[["^ ","^12",257,"^13",325,"^C","xrel"]]],"~i110",["^ ","^1G",[["^ ","^12",4,"^13",328,"^C","idx"]],"^16",[["^ ","^12",10,"^13",328]],"^1;",[["^ ","^12",10,"^13",328,"^C","clojure.set/index"]],"^1B",[["^ ","^12",28,"^13",328,"^C","r"]],"^1C",[["^ ","^12",30,"^13",328,"^C","ks"]]],"~i111",["^ ","~i7",[["^ ","^12",0,"^13",329],["^ ","^12",1,"^13",344]],"~i8",[["^ ","^12",7,"^13",329,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^16",[["^ ","^12",54,"^13",329],["^ ","^12",0,"^13",331]],"^1E",[["^ ","^12",18,"^13",330,"^C","ret"]],"^1C",[["^ ","^12",22,"^13",330,"^C","x"]]],"~i112",["^ ","^1S",[["^ ","^12",0,"^13",331],["^ ","^12",0,"^13",334]],"^14",[["^ ","^12",4,"^13",331,"^C","found"]],"^1:",[["^ ","^12",12,"^13",331],["^ ","^12",29,"^13",331,"^C","G__4906"],["^ ","^12",0,"^13",332],["^ ","^12",0,"^13",332],["^ ","^12",78,"^13",332,"^C","G__4906"],["^ ","^12",103,"^13",332,"^C","G__4906"]],"^1D",[["^ ","^12",8,"^13",332,"^C","idx"],["^ ","^12",44,"^13",332,"^C","idx"],["^ ","^12",89,"^13",332,"^C","idx"]],"^1R",[["^ ","^12",39,"^13",331]],"^1>",[["^ ","^12",39,"^13",331,"^C","cljs.core/select-keys"]],"^1J",[["^ ","^12",61,"^13",331,"^C","x"]],"^24",[["^ ","^12",63,"^13",331,"^C","ks"]]],"~i113",["^ ","^18",[["^ ","^12",0,"^13",334]],"^14",[["^ ","^12",20,"^13",334,"^C","found"]]],"~i114",["^ ","^1A",[["^ ","^12",0,"^13",335],["^ ","^12",54,"^13",335],["^ ","^12",18,"^13",336,"^C","p1__4883#"],["^ ","^12",34,"^13",336,"^C","p2__4884#"],["^ ","^12",0,"^13",337]],"^1B",[["^ ","^12",7,"^13",335,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1D",[["^ ","^12",0,"^13",337],["^ ","^12",52,"^13",337,"^C","p1__4883#"]],"^2D",[["^ ","^12",7,"^13",337,"^C","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1W",[["^ ","^12",68,"^13",337],["^ ","^12",171,"^13",337,"^C","p2__4884#"]],"^1H",[["^ ","^12",68,"^13",337,"^C","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^24",[["^ ","^12",187,"^13",337,"^C","x"]],"^28",[["^ ","^12",1,"^13",339,"^C","ret"]],"^1L",[["^ ","^12",5,"^13",339,"^C","found"]]],"~i115",["^ ","^1A",[["^ ","^12",0,"^13",341,"^C","ret"]]],"~i116",["^ ","^18",[["^ ","^12",35,"^13",344,"^C","s"]]],"~i118",["^ ","~i4",[["^ ","^12",60,"^13",350,"^C","xrel"]],"~i9",[["^ ","^12",65,"^13",350,"^C","yrel"]],"^1=",[["^ ","^12",70,"^13",350,"^C","km"]]],"~i119",["^ ","~i3",[["^ ","^12",0,"^13",351],["^ ","^12",4,"^13",351,"^C","vec__4915"],["^ ","^12",8,"^13",352],["^ ","^12",8,"^13",352,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",52,"^13",352,"^C","vec__4915"],["^ ","^12",62,"^13",352],["^ ","^12",66,"^13",352],["^ ","^12",8,"^13",353],["^ ","^12",8,"^13",353,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",52,"^13",353,"^C","vec__4915"],["^ ","^12",62,"^13",353],["^ ","^12",66,"^13",353],["^ ","^12",8,"^13",354],["^ ","^12",8,"^13",354,"^C","cljs.core.nth.cljs$core$IFn$_invoke$arity$3"],["^ ","^12",52,"^13",354,"^C","vec__4915"],["^ ","^12",62,"^13",354],["^ ","^12",66,"^13",354],["^ ","^12",0,"^13",356]],"^1<",[["^ ","^12",4,"^13",352,"^C","r"]],"^11",[["^ ","^12",4,"^13",353,"^C","s"]],"^1=",[["^ ","^12",4,"^13",354,"^C","k"]],"^1S",[["^ ","^12",16,"^13",351],["^ ","^12",68,"^13",351],["^ ","^12",196,"^13",351]],"^1A",[["^ ","^12",18,"^13",351]],"^15",[["^ ","^12",19,"^13",351]],"^1F",[["^ ","^12",19,"^13",351,"^C","cljs.core/count"]],"^1P",[["^ ","^12",35,"^13",351,"^C","xrel"]],"^1V",[["^ ","^12",44,"^13",351]],"^1W",[["^ ","^12",44,"^13",351,"^C","cljs.core/count"]],"^1Y",[["^ ","^12",60,"^13",351,"^C","yrel"]]],"~i120",["^ ","^1E",[["^ ","^12",151,"^13",351,"^C","xrel"]],"^15",[["^ ","^12",156,"^13",351,"^C","yrel"]],"^1D",[["^ ","^12",161,"^13",351]],"^2D",[["^ ","^12",161,"^13",351,"^C","clojure.set/map-invert"]],"^1?",[["^ ","^12",184,"^13",351,"^C","km"]]],"~i121",["^ ","^1E",[["^ ","^12",279,"^13",351,"^C","yrel"]],"^15",[["^ ","^12",284,"^13",351,"^C","xrel"]],"^1D",[["^ ","^12",289,"^13",351,"^C","km"]]],"~i122",["^ ","~i9",[["^ ","^12",4,"^13",355,"^C","idx"]],"^17",[["^ ","^12",10,"^13",355]],"^1=",[["^ ","^12",10,"^13",355,"^C","clojure.set/index"]],"^1E",[["^ ","^12",28,"^13",355,"^C","r"]],"^1B",[["^ ","^12",30,"^13",355]],"^14",[["^ ","^12",30,"^13",355,"^C","cljs.core/vals"]],"^1N",[["^ ","^12",45,"^13",355,"^C","k"]]],"~i123",["^ ","~i5",[["^ ","^12",0,"^13",356],["^ ","^12",1,"^13",371]],"~i6",[["^ ","^12",7,"^13",356,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^17",[["^ ","^12",54,"^13",356],["^ ","^12",0,"^13",358]],"^1@",[["^ ","^12",18,"^13",357,"^C","ret"]],"^1B",[["^ ","^12",22,"^13",357,"^C","x"]]],"~i124",["^ ","^16",[["^ ","^12",0,"^13",358],["^ ","^12",0,"^13",361]],"^1A",[["^ ","^12",4,"^13",358,"^C","found"]],"^19",[["^ ","^12",12,"^13",358],["^ ","^12",29,"^13",358,"^C","G__4925"],["^ ","^12",0,"^13",359],["^ ","^12",0,"^13",359],["^ ","^12",78,"^13",359,"^C","G__4925"],["^ ","^12",103,"^13",359,"^C","G__4925"]],"^1N",[["^ ","^12",8,"^13",359,"^C","idx"],["^ ","^12",44,"^13",359,"^C","idx"],["^ ","^12",89,"^13",359,"^C","idx"]],"^1P",[["^ ","^12",39,"^13",358]],"^1Q",[["^ ","^12",39,"^13",358,"^C","clojure.set/rename-keys"]],"^1Y",[["^ ","^12",63,"^13",358]],"^1I",[["^ ","^12",63,"^13",358,"^C","cljs.core/select-keys"]],"~i58",[["^ ","^12",85,"^13",358,"^C","x"]],"^1M",[["^ ","^12",87,"^13",358]],"^20",[["^ ","^12",87,"^13",358,"^C","cljs.core/keys"]],"^21",[["^ ","^12",102,"^13",358,"^C","k"]],"~i70",[["^ ","^12",106,"^13",358,"^C","k"]]],"~i125",["^ ","^1S",[["^ ","^12",0,"^13",361]],"^1A",[["^ ","^12",20,"^13",361,"^C","found"]]],"~i126",["^ ","^18",[["^ ","^12",0,"^13",362],["^ ","^12",54,"^13",362],["^ ","^12",18,"^13",363,"^C","p1__4885#"],["^ ","^12",34,"^13",363,"^C","p2__4886#"],["^ ","^12",0,"^13",364]],"^1E",[["^ ","^12",7,"^13",362,"^C","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3"]],"^1N",[["^ ","^12",0,"^13",364],["^ ","^12",52,"^13",364,"^C","p1__4885#"]],"^1:",[["^ ","^12",7,"^13",364,"^C","cljs.core.conj.cljs$core$IFn$_invoke$arity$2"]],"^1U",[["^ ","^12",68,"^13",364],["^ ","^12",171,"^13",364,"^C","p2__4886#"]],"^1V",[["^ ","^12",68,"^13",364,"^C","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic"]],"^1J",[["^ ","^12",187,"^13",364,"^C","x"]],"^27",[["^ ","^12",1,"^13",366,"^C","ret"]],"^1Z",[["^ ","^12",5,"^13",366,"^C","found"]]],"~i127",["^ ","^18",[["^ ","^12",0,"^13",368,"^C","ret"]]],"~i128",["^ ","^1S",[["^ ","^12",35,"^13",371,"^C","s"]]],"~i130",["^ ","~i0",[["^ ","^12",0,"^13",376],["^ ","^12",28,"^13",379],["^ ","^12",0,"^13",380]],"~i6",[["^ ","^12",0,"^13",379,"^C","clojure.set/subset?"]]],"~i132",["^ ","~i3",[["^ ","^12",64,"^13",379,"^C","set1"]],"~i8",[["^ ","^12",69,"^13",379,"^C","set2"]]],"~i133",["^ ","~i2",[["^ ","^12",0,"^13",380]],"~i7",[["^ ","^12",9,"^13",380]],"^1G",[["^ ","^12",10,"^13",380]],"^11",[["^ ","^12",10,"^13",380,"^C","cljs.core/count"]],"^1@",[["^ ","^12",26,"^13",380,"^C","set1"]],"^1C",[["^ ","^12",35,"^13",380]],"^15",[["^ ","^12",35,"^13",380,"^C","cljs.core/count"]],"^2D",[["^ ","^12",51,"^13",380,"^C","set2"]]],"~i134",["^ ","~i7",[["^ ","^12",63,"^13",380],["^ ","^12",86,"^13",380],["^ ","^12",97,"^13",380,"^C","p1__4940#"],["^ ","^12",0,"^13",381]],"~i8",[["^ ","^12",63,"^13",380,"^C","cljs.core/every?"]],"^1;",[["^ ","^12",0,"^13",381],["^ ","^12",38,"^13",381,"^C","p1__4940#"]],"^1S",[["^ ","^12",7,"^13",381,"^C","cljs.core/contains?"]],"^19",[["^ ","^12",33,"^13",381,"^C","set2"]],"^1>",[["^ ","^12",3,"^13",382,"^C","set1"]]],"~i136",["^ ","~i0",[["^ ","^12",0,"^13",384],["^ ","^12",30,"^13",387],["^ ","^12",0,"^13",388]],"~i6",[["^ ","^12",0,"^13",387,"^C","clojure.set/superset?"]]],"~i138",["^ ","~i3",[["^ ","^12",68,"^13",387,"^C","set1"]],"~i8",[["^ ","^12",73,"^13",387,"^C","set2"]]],"~i139",["^ ","~i2",[["^ ","^12",0,"^13",388]],"~i7",[["^ ","^12",9,"^13",388]],"^1G",[["^ ","^12",10,"^13",388]],"^11",[["^ ","^12",10,"^13",388,"^C","cljs.core/count"]],"^1@",[["^ ","^12",26,"^13",388,"^C","set1"]],"^1C",[["^ ","^12",35,"^13",388]],"^15",[["^ ","^12",35,"^13",388,"^C","cljs.core/count"]],"^2D",[["^ ","^12",51,"^13",388,"^C","set2"]]],"~i140",["^ ","~i7",[["^ ","^12",63,"^13",388],["^ ","^12",86,"^13",388],["^ ","^12",97,"^13",388,"^C","p1__4944#"],["^ ","^12",0,"^13",389]],"~i8",[["^ ","^12",63,"^13",388,"^C","cljs.core/every?"]],"^1;",[["^ ","^12",0,"^13",389],["^ ","^12",38,"^13",389,"^C","p1__4944#"]],"^1S",[["^ ","^12",7,"^13",389,"^C","cljs.core/contains?"]],"^19",[["^ ","^12",33,"^13",389,"^C","set1"]],"^1>",[["^ ","^12",3,"^13",390,"^C","set2"]]],"~i142",["^ ","~i0",[["^ ","^12",0,"^13",392]]]],"~:cljc",false],"~:cache-keys",["~#cmap",[["~:macro","^I"],[1534380137000],["^U","goog/math/math.js"],[1530991559994,"^J","~$goog.array","~$goog.asserts"],["^U","goog/array/array.js"],[1530991559994,"^J","^3S"],["^U","goog/debug/error.js"],[1530991559994,"^J"],["^U","goog/dom/nodetype.js"],[1530991559994,"^J"],["^U","goog/object/object.js"],[1530991559994,"^J"],"~:SHADOW-TIMESTAMP",[1535746856000,1534380137000],["^U","goog/math/long.js"],[1530991559994,"^J","^3S","~$goog.reflect"],["^U","goog/functions/functions.js"],[1530991559994,"^J"],["^U","goog/structs/map.js"],[1530991559994,"^J","~$goog.iter.Iterator","~$goog.iter.StopIteration","~$goog.object"],["^U","goog/asserts/asserts.js"],[1530991559994,"^J","~$goog.debug.Error","~$goog.dom.NodeType","~$goog.string"],["^U","goog/uri/uri.js"],[1530991559994,"^J","^3R","^3S","^3[","~$goog.structs","~$goog.structs.Map","~$goog.uri.utils","~$goog.uri.utils.ComponentIndex","~$goog.uri.utils.StandardQueryParam"],["^U","goog/base.js"],[1530991559994],["^U","goog/structs/structs.js"],[1530991559994,"^J","^3R","^3X"],["^U","goog/string/string.js"],[1530991559994,"^J"],["^U","goog/reflect/reflect.js"],[1530991559994,"^J"],["^U","goog/string/stringbuffer.js"],[1530991559994,"^J"],["^U","goog/iter/iter.js"],[1530991559994,"^J","^3R","^3S","~$goog.functions","~$goog.math"],["^U","cljs/core.cljs"],[1534380137690,"~$goog.math.Long","~$goog.math.Integer","^3[","^3X","^3R","~$goog.Uri","~$goog.string.StringBuffer"],["^U","goog/math/integer.js"],[1530991559994,"^J"],["^U","clojure/set.cljs"],[1534380137690,"^J","^I"],["^U","goog/uri/utils.js"],[1530991559994,"^J","^3R","^3S","^3["]]],"~:analyzer",["^ ","^3",null,"^4",["^ "],"^5",["^ ","^6","clojure/set.cljs","^7",11,"^8",8,"^9",11,"^:",19,"^;","Set operations such as union/intersection.","^<","Rich Hickey"],"^=",["^ ","^>","^?"],"^@",null,"^A",["^B",[]],"^C","^D","^G",null,"^H",["^ ","^I","^I","^J","^J"],"^K",["^B",[]],"~:shadow/js-access-global",["^B",["Error"]],"^L",null,"~:defs",["^ ","~$union",["^ ","~:protocol-inline",null,"^5",["^ ","^6","clojure/set.cljs","^7",19,"^8",7,"^9",19,"^:",12,"~:arglists",["^O",["~$quote",["^O",[[],["~$s1"],["^4B","~$s2"],["^4B","^4C","~$&","~$sets"]]]]],"^;","Return a set that is the union of the input sets","~:top-fn",["^ ","~:variadic",true,"~:max-fixed-arity",2,"~:method-params",["^O",[[],["^4B"],["^4B","^4C"]]],"^4@",["^O",[[],["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"~:arglists-meta",["^O",[null,null,null,null]]]],"^C","~$clojure.set/union","^4F",true,"^6","clojure/set.cljs","^:",12,"^4E",["^ ","^4F",true,"^4G",2,"^4H",["^O",[[],["^4B"],["^4B","^4C"]]],"^4@",["^O",[[],["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^4I",["^O",[null,null,null,null]]],"^4H",["^O",[[],["^4B"],["^4B","^4C"]]],"~:protocol-impl",null,"^4I",["^O",[null,null,null,null]],"^8",1,"^7",19,"^9",19,"^4G",2,"~:fn-var",true,"^4@",["^O",[[],["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^;","Return a set that is the union of the input sets"],"~$map-invert",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",97,"^8",7,"^9",97,"^:",17,"^4@",["^O",["^4A",["^O",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"^C","~$clojure.set/map-invert","^4F",false,"^6","clojure/set.cljs","^:",17,"^4H",["^O",[["~$m"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",97,"^9",97,"^4G",1,"^4L",true,"^4@",["^O",["^4A",["^O",[["~$m"]]]]],"^;","Returns the map with the vals mapped to the keys."],"~$join",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",101,"^8",7,"^9",101,"^:",11,"^4@",["^O",["^4A",["^O",[["~$xrel","~$yrel"],["^4P","^4Q","~$km"]]]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.","^4E",["^ ","^4F",false,"^4G",3,"^4H",["^O",[["^4P","^4Q"],["^4P","^4Q","^4R"]]],"^4@",["^O",[["^4P","^4Q"],["^4P","^4Q","^4R"]]],"^4I",["^O",[null,null]]]],"^C","~$clojure.set/join","^4F",false,"^6","clojure/set.cljs","^:",11,"^4E",["^ ","^4F",false,"^4G",3,"^4H",["^O",[["^4P","^4Q"],["^4P","^4Q","^4R"]]],"^4@",["^O",[["^4P","^4Q"],["^4P","^4Q","^4R"]]],"^4I",["^O",[null,null]]],"^4H",["^O",[["^4P","^4Q"],["^4P","^4Q","^4R"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",101,"^9",101,"^4G",3,"^4L",true,"^4@",["^O",[["^4P","^4Q"],["^4P","^4Q","^4R"]]],"^;","When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys."],"~$select",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",61,"^8",7,"^9",61,"^:",13,"^4@",["^O",["^4A",["^O",[["~$pred","~$xset"]]]]],"^;","Returns a set of the elements for which pred is true"],"^C","~$clojure.set/select","^4F",false,"^6","clojure/set.cljs","^:",13,"^4H",["^O",[["^4U","^4V"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",61,"^9",61,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["^4U","^4V"]]]]],"^;","Returns a set of the elements for which pred is true"],"~$intersection",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",31,"^8",7,"^9",31,"^:",19,"^4@",["^O",["^4A",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]]]],"^;","Return a set that is the intersection of the input sets","^4E",["^ ","^4F",true,"^4G",2,"^4H",["^O",[["^4B"],["^4B","^4C"]]],"^4@",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^4I",["^O",[null,null,null]]]],"^C","~$clojure.set/intersection","^4F",true,"^6","clojure/set.cljs","^:",19,"^4E",["^ ","^4F",true,"^4G",2,"^4H",["^O",[["^4B"],["^4B","^4C"]]],"^4@",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^4I",["^O",[null,null,null]]],"^4H",["^O",[["^4B"],["^4B","^4C"]]],"^4K",null,"^4I",["^O",[null,null,null]],"^8",1,"^7",31,"^9",31,"^4G",2,"^4L",true,"^4@",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^;","Return a set that is the intersection of the input sets"],"~$superset?",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",137,"^8",7,"^9",137,"^:",16,"^4@",["^O",["^4A",["^O",[["~$set1","~$set2"]]]]],"^;","Is set1 a superset of set2?"],"^C","~$clojure.set/superset?","^4F",false,"^6","clojure/set.cljs","^:",16,"^4H",["^O",[["^4[","^50"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",137,"^9",137,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["^4[","^50"]]]]],"^;","Is set1 a superset of set2?"],"~$index",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",87,"^8",7,"^9",87,"^:",12,"^4@",["^O",["^4A",["^O",[["^4P","~$ks"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"^C","~$clojure.set/index","^4F",false,"^6","clojure/set.cljs","^:",12,"^4H",["^O",[["^4P","^53"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",87,"^9",87,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["^4P","^53"]]]]],"^;","Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks."],"~$bubble-max-key",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",13,"^8",8,"^9",13,"^:",22,"~:private",true,"^4@",["^O",["^4A",["^O",[["~$k","~$coll"]]]]]],"^56",true,"^C","~$clojure.set/bubble-max-key","^4F",false,"^6","clojure/set.cljs","^:",22,"^4H",["^O",[["~$k","^57"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",13,"^9",13,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["~$k","^57"]]]]]],"~$subset?",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",131,"^8",7,"^9",131,"^:",14,"^4@",["^O",["^4A",["^O",[["^4[","^50"]]]]],"^;","Is set1 a subset of set2?"],"^C","~$clojure.set/subset?","^4F",false,"^6","clojure/set.cljs","^:",14,"^4H",["^O",[["^4[","^50"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",131,"^9",131,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["^4[","^50"]]]]],"^;","Is set1 a subset of set2?"],"~$rename",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",82,"^8",7,"^9",82,"^:",13,"^4@",["^O",["^4A",["^O",[["^4P","~$kmap"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"^C","~$clojure.set/rename","^4F",false,"^6","clojure/set.cljs","^:",13,"^4H",["^O",[["^4P","^5<"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",82,"^9",82,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["^4P","^5<"]]]]],"^;","Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap"],"~$rename-keys",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",72,"^8",7,"^9",72,"^:",18,"^4@",["^O",["^4A",["^O",[["~$map","^5<"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"^C","~$clojure.set/rename-keys","^4F",false,"^6","clojure/set.cljs","^:",18,"^4H",["^O",[["^5?","^5<"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",72,"^9",72,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["^5?","^5<"]]]]],"^;","Returns the map with the keys in kmap renamed to the vals in kmap"],"~$project",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",67,"^8",7,"^9",67,"^:",14,"^4@",["^O",["^4A",["^O",[["^4P","^53"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"^C","~$clojure.set/project","^4F",false,"^6","clojure/set.cljs","^:",14,"^4H",["^O",[["^4P","^53"]]],"^4K",null,"^4I",["^O",[null,null]],"^8",1,"^7",67,"^9",67,"^4G",2,"^4L",true,"^4@",["^O",["^4A",["^O",[["^4P","^53"]]]]],"^;","Returns a rel of the elements of xrel with only the keys in ks"],"~$difference",["^ ","^4?",null,"^5",["^ ","^6","clojure/set.cljs","^7",46,"^8",7,"^9",46,"^:",17,"^4@",["^O",["^4A",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]]]],"^;","Return a set that is the first set without elements of the remaining sets","^4E",["^ ","^4F",true,"^4G",2,"^4H",["^O",[["^4B"],["^4B","^4C"]]],"^4@",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^4I",["^O",[null,null,null]]]],"^C","~$clojure.set/difference","^4F",true,"^6","clojure/set.cljs","^:",17,"^4E",["^ ","^4F",true,"^4G",2,"^4H",["^O",[["^4B"],["^4B","^4C"]]],"^4@",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^4I",["^O",[null,null,null]]],"^4H",["^O",[["^4B"],["^4B","^4C"]]],"^4K",null,"^4I",["^O",[null,null,null]],"^8",1,"^7",46,"^9",46,"^4G",2,"^4L",true,"^4@",["^O",[["^4B"],["^4B","^4C"],["^4B","^4C","~$&","^4D"]]],"^;","Return a set that is the first set without elements of the remaining sets"]],"^M",["^ ","^I","^I"],"^Q",["^ "],"^R",["^ "],"^S",["^J","^I"]],"^F","^D","~:ns-specs",["^ "],"~:ns-speced-vars",[],"~:compiler-options",["^3P",[["^5G","~:static-fns"],true,["^5G","~:elide-asserts"],false,["^5G","~:optimize-constants"],null,["^5G","~:external-config"],null,["^5G","~:tooling-config"],null,["^5G","~:emit-constants"],null,["^5G","~:infer-externs"],true,["^5G","^Z"],null,["~:js-options","~:js-provider"],"~:require",["~:mode"],"~:dev",["^5G","~:fn-invoke-direct"],null,["^5G","^10"],"/dev/null"]]]